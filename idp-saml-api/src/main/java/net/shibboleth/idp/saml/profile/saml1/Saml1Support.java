/*
 * Licensed to the University Corporation for Advanced Internet Development, 
 * Inc. (UCAID) under one or more contributor license agreements.  See the 
 * NOTICE file distributed with this work for additional information regarding
 * copyright ownership. The UCAID licenses this file to You under the Apache 
 * License, Version 2.0 (the "License"); you may not use this file except in 
 * compliance with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.shibboleth.idp.saml.profile.saml1;

import java.util.List;

import net.shibboleth.idp.profile.AbstractIdentityProviderAction;
import net.shibboleth.idp.profile.ActionSupport;
import net.shibboleth.idp.profile.ProfileException;
import net.shibboleth.idp.profile.ProfileRequestContext;
import net.shibboleth.idp.relyingparty.RelyingPartySubcontext;
import net.shibboleth.idp.relyingparty.SecurityConfiguration;

import org.opensaml.common.SAMLObjectBuilder;
import org.opensaml.common.SAMLVersion;
import org.opensaml.messaging.context.BasicMessageMetadataSubcontext;
import org.opensaml.messaging.context.MessageContext;
import org.opensaml.saml1.core.Assertion;
import org.opensaml.saml1.core.Conditions;
import org.opensaml.saml1.core.Response;
import org.opensaml.xml.Configuration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** Helper methods for creating and inspecting SAML 1 message components. */
public final class Saml1Support {

    /** Constructor. */
    private Saml1Support() {

    }

    /**
     * Gets the {@link Assertion} associated with the {@link Response}. If the {@link Response} does not contain an
     * {@link Assertion} one is created and added to it. The created assertion will:
     * <ul>
     * <li>have an ID generated by the {@link org.opensaml.util.IdentifierGenerator} associated with the active
     * {@link net.shibboleth.idp.relyingparty.ProfileConfiguration} for the relying party</li>
     * <li>an issue instant set to the {@link Response#getIssueInstant()}
     * <li>
     * <li>an issuer set to the {@link BasicMessageMetadataSubcontext#getMessageIssuer()} located on the given
     * {@link MessageContext}
     * </ul>
     * 
     * @param action action attempting to construct the assertion, never null
     * @param profileRequestContext current profile request context, never null
     * @param relyingPartyContext current relying party information, never null
     * 
     * @return the assertions associated with the response, never null
     * 
     * @throws ProfileException thrown if there message context does not contain a {@link Response} message or
     *             {@link BasicMessageMetadataSubcontext}
     */
    public static List<Assertion> getAssertionsFromResponse(final AbstractIdentityProviderAction action,
            final ProfileRequestContext<Object, Response> profileRequestContext,
            final RelyingPartySubcontext relyingPartyContext) throws ProfileException {

        final MessageContext<Response> messageCtx =
                ActionSupport.getOutboundMessageContext(action, profileRequestContext);

        final Response samlResponse = ActionSupport.getOutboundMessage(action, messageCtx);

        final List<Assertion> assertions = samlResponse.getAssertions();
        if (assertions.isEmpty()) {
            final BasicMessageMetadataSubcontext outboundMsgMetadataCtx =
                    ActionSupport.getSubcontext(action, messageCtx, BasicMessageMetadataSubcontext.class);

            final SecurityConfiguration securityConfig =
                    relyingPartyContext.getProfileConfig().getSecurityConfiguration();

            final SAMLObjectBuilder<Assertion> assertionBuilder =
                    (SAMLObjectBuilder<Assertion>) Configuration.getBuilderFactory().getBuilder(Assertion.TYPE_NAME);

            final Assertion assertion = assertionBuilder.buildObject();
            assertion.setID(securityConfig.getIdGenerator().generateIdentifier());
            assertion.setIssueInstant(samlResponse.getIssueInstant());
            assertion.setIssuer(outboundMsgMetadataCtx.getMessageIssuer());
            assertion.setVersion(SAMLVersion.VERSION_11);

            getLogger().debug("Action {}: Response {} did not yet contain an Assertion, added Assertion {} to it",
                    new Object[] {action, samlResponse.getID(), assertion.getID(),});
            samlResponse.getAssertions().add(assertion);
        }

        return assertions;
    }

    /**
     * Gets the {@link Conditions} associated with the given {@link Assertion}. If there is no {@link Conditions}
     * associated with the given {@link Assertion} then one is created.
     * 
     * @param action action creating making the request, never null
     * @param assertion the assertion, never null
     * 
     * @return the {@link Conditions} associated with the given {@link Assertion}
     */
    public static Conditions getConditionsFromAssertion(final AbstractIdentityProviderAction action,
            final Assertion assertion) {
        Conditions conditions = assertion.getConditions();
        if (conditions == null) {
            final SAMLObjectBuilder<Conditions> conditionsBuilder =
                    (SAMLObjectBuilder<Conditions>) Configuration.getBuilderFactory().getBuilder(Conditions.TYPE_NAME);
            conditions = conditionsBuilder.buildObject();
            assertion.setConditions(conditions);
            getLogger().debug("Action {}: Assertion {} did not already contain a Conditions, one was added",
                    action.getId(), assertion.getID());
        }

        return conditions;
    }

    /**
     * Gets the logger for this class.
     * 
     * @return logger for this class, never null
     */
    private static Logger getLogger() {
        return LoggerFactory.getLogger(Saml1Support.class);
    }
}