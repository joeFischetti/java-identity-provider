<?xml version="1.0" encoding="UTF-8"?>
<project name="Shibboleth Identity Provider V3" basedir=".." default="install">

  <taskdef resource="net/shibboleth/idp/installer/ant.xml"/>
	
  <!-- We assume some properties set on the command line 
       idp.src.dir = where the install has been unpacked to
       idp.target.dir = where we are installing to.  In windows these are the same
       (because windows has *not* unpacked the conf/view/flows)

       TODO
       For now hardwire
    -->

  <property name="idp.src.dir" value="${basedir}"/>
  <property name="idp.target.dir" value="${basedir}"/>

  <target name="init">
    <tstamp/>
  </target>

  <target name="install" depends="init, genkeys, upgrade, build-war"/>
  <target name="v2upgrade" depends="init, v2v3prepopulate, install"/>

  <!-- USER INPUT -->
  <target name="gethostname" if="idp.ask.for.hostname" depends="checkkeys">
    <input message="Hostname" addproperty="idp.host.name"/>
  </target>

  <target name="geturisubjectaltname" if="idp.generate.altname" depends="checkkeys">
    <property name="idp.uri.subject.alt.name" value="https://${idp.host.name}/org/shibboleth/idp"/>
  </target>

  <target name="getkeystorepassword"  if="idp.ask.keystore.password" depends="checkkeys">
    <input message="Key Store Password" addproperty="idp.keystore.password"/>
  </target>

  <target name="getsealerpassword" if="idp.ask.sealer.password" depends="checkkeys">
    <input message="Sealer Password" addproperty="idp.sealer.password"/>
  </target>

  <target name="getsealeralias" if="idp.ask.sealer.alias" depends="checkkeys">
    <input message="Sealer Alias" addproperty="idp.sealer.alias"/>
  </target>

   <!--

    KEY MANAGEMENT

     TODO: Passwords 

   -->

  <target name="genkeys" depends="init, checkkeys, signing-key, encryption-key, keystore, sealer"/>

  <target name="checkkeys">
    <available property="idp.signing.present" file="${idp.target.dir}/creds/idp-signing.crt"/>
    <available property="idp.encryption.present" file="${idp.target.dir}/creds/idp-encryption.crt"/>
    <available property="idp.keystore.present" file="${idp.target.dir}/creds/idp-tls.p12"/>
    <available property="idp.sealer.present" file="${idp.target.dir}/creds/sealer.kver"/>
    <condition property="idp.will.call.certgen">
      <!-- we will call the cert gen if
                EITHER we don't have a signing key
                OR we don't have a encryption key
                OR we don't have a tls -->
      <or>
        <not>
          <istrue value="${idp.signing.present}"/>
        </not>
        <not>
          <istrue value="${idp.encryption.present}"/>
        </not>
        <not>
          <istrue value="${idp.keystore.present}"/>
        </not>
      </or>
    </condition>

    <condition property="idp.ask.for.hostname">
      <!-- We ask for host name if there is no host name and we will call certgen -->
      <and>
        <not>
          <isset property="idp.host.name"/>
        </not>
        <istrue value="${idp.will.call.certgen}"/>
      </and>
    </condition>

    <condition property="idp.generate.altname">
      <!-- We ask for alt name if there is no alt name and we will call certgen -->
      <and>
        <not>
          <isset property="uri.subject.alt.name"/>
        </not>
        <istrue value="${idp.will.call.certgen}"/>
      </and>
    </condition>

    <condition property="idp.ask.keystore.password">
      <!-- We ask for keystore password if there is no keystore password and no keystore -->
      <and>
        <not>
          <isset property="idp.keystore.password"/>
        </not>
        <not>
          <istrue value="${idp.keystore.present}"/>
        </not>
      </and>
    </condition>

    <condition property="idp.ask.sealer.password">
      <!-- We ask for sealer password if there is no sealer password and no sealer -->
      <and>
        <not>
          <isset property="idp.sealer.password"/>
        </not>
        <not>
          <istrue value="${idp.sealer.present}"/>
        </not>
      </and>
    </condition>

    <condition property="idp.ask.sealer.alias">
      <!-- We ask for sealer alias if there is no sealer alias and no sealer -->
      <and>
        <not>
          <isset property="idp.sealer.alias"/>
        </not>
        <not>
          <istrue value="${idp.sealer.present}"/>
        </not>
      </and>
    </condition>
  </target>

  <target name="signing-key" unless="idp.signing.present" depends="gethostname, geturisubjectaltname">
    <echo>Creating Signing Key, hostname ${idp.host.name} URI = ${idp.uri.subject.alt.name}</echo>
    <selfsignedcert hostname="${idp.host.name}" 
                    privateKeyFile="${idp.target.dir}/creds/idp-signing.key" 
                    certificateFile="${idp.target.dir}/creds/idp-signing.crt" 
                    uriSubjectAltNames="${idp.uri.subject.alt.name}"/>
  </target>

  <target name="encryption-key" unless="idp.encryption.present" depends="gethostname, geturisubjectaltname">
    <echo>Creating Encryption Key, hostname ${idp.host.name} URI = ${idp.uri.subject.alt.name}</echo>
    <selfsignedcert hostname="${idp.host.name}" 
                    privateKeyFile="${idp.target.dir}/creds/idp-encryption.key" 
                    certificateFile="${idp.target.dir}/creds/idp-encryption.crt" 
                    uriSubjectAltNames="${idp.uri.subject.alt.name}"/>
  </target>

  <target name="keystore" unless="idp.keystore.present" depends="getkeystorepassword, gethostname, geturisubjectaltname">
    <echo>Creating TLS keystore, hostname ${idp.host.name} URI = ${idp.uri.subject.alt.name} password supressed</echo>
    <selfsignedcert hostname="${idp.host.name}"
                    keystoreFile="${idp.target.dir}/creds/idp-tls.p12"
                    keystorePassword="$(idp.keystore.password}"
                    uriSubjectAltNames="${idp.uri.subject.alt.name}"/>
  </target>

  <target name="sealer" unless="idp.sealer.present" depends="getsealerpassword, getsealeralias">
    <echo>Creating sealer</echo>
    <keystorestrategy keystoreFile="${idp.target.dir}/creds/sealer.jks"
                      versionFile="${idp.target.dir}/creds/sealer.kver"
  	              keyAlias="${idp.sealer.alias}"
  	              keystorePassword="${idp.sealer.password}"/>
  </target>

  <!--

     GENERAL V3 TO V3 UPGRADE

    -->

  <target name="upgrade">
    <!-- conf -->
    <mkdir  dir="${idp.target.dir}/conf"/>
    <copy todir="${idp.target.dir}/conf">
      <fileset dir="${idp.target.dir}/dist/conf" includes="**/*">
        <present present="srconly" targetdir="${idp.target.dir}/conf">
          <mapper type="glob" from="*.dist" to="*"/>
        </present>
       </fileset>
      <mapper type="glob" from="*.dist" to="*"/>
    </copy>
    <!-- flows -->
    <mkdir  dir="${idp.target.dir}/flows"/>
    <copy todir="${idp.target.dir}/flows">
      <fileset dir="${idp.target.dir}/dist/flows" includes="**/*">
        <present present="srconly" targetdir="${idp.target.dir}/flows">
          <mapper type="glob" from="*.dist" to="*"/>
        </present>
       </fileset>
      <mapper type="glob" from="*.dist" to="*"/>
    </copy>
    <!-- views -->
    <mkdir  dir="${idp.target.dir}/views"/>
    <copy todir="${idp.target.dir}/views">
      <fileset dir="${idp.target.dir}/dist/views" includes="**/*">
        <present present="srconly" targetdir="${idp.target.dir}/views">
          <mapper type="glob" from="*.dist" to="*"/>
        </present>
       </fileset>
      <mapper type="glob" from="*.dist" to="*"/>
    </copy>
  </target>

  <!--

    CREATE WAR FILE

   -->

  <target name="build-war" >
    <copy todir="${idp.target.dir}/war" overwrite="true" failonerror="false">
      <fileset dir="${idp.target.dir}/edit-webapp"/>
    </copy>
    <!-- build a jar, not war, since it is already full populated -->
    <delete file="${idp.target.dir}/idp.war" failonerror="false"/>
    <jar destfile="${idp.target.dir}/idp.war" basedir="${idp.target.dir}/war"/>
  </target>

  <target name="v2v3prepopulate">
    <!-- TODO - rename config to config.old
              - create war.old and move away any old war files
              - rename war to war.old
              - rename Credentials to credentials.old
              - copy selected files from config.old -->
  </target>
</project>
