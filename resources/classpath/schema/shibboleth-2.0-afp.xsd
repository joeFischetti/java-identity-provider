<?xml version="1.0" encoding="UTF-8"?>
<schema targetNamespace="urn:mace:shibboleth:2.0:afp" xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:afp="urn:mace:shibboleth:2.0:afp" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">

    <import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="classpath:/schema/xmldsig-core-schema.xsd" />

    <annotation>
        <documentation>Schema for the attribute filter policies.</documentation>
    </annotation>

    <element name="AttributeFilterPolicy" type="afp:AttributeFilterPolicyType">
        <annotation>
            <documentation>Root element of the attribute filter policy.</documentation>
        </annotation>
    </element>
    <complexType name="AttributeFilterPolicyType">
        <sequence>
            <element ref="ds:Signature" minOccurs="0">
                <annotation>
                    <documentation>
                        Digital signature for the policy. Policies that are fetched from an external source, such as a
                        federation, should be signed.
                    </documentation>
                </annotation>
            </element>
            <element ref="afp:ApplicationRequirement" minOccurs="0" maxOccurs="unbounded">
                <annotation>
                    <documentation>
                        Defines a set of requirements applications requirements that may be reused across multiple
                        attribtue rules.
                    </documentation>
                </annotation>
            </element>
            <element ref="afp:ValueFilter" minOccurs="0" maxOccurs="unbounded">
                <annotation>
                    <documentation>
                        Defines an attribute value filter that may be reused across multiple attribtue rules.
                    </documentation>
                </annotation>
            </element>
            <element ref="afp:AttributeRule" maxOccurs="unbounded">
                <annotation>
                    <documentation>A rule that describes how values of an attribute will be filtered.</documentation>
                </annotation>
            </element>
        </sequence>
        <attribute name="id" type="ID" use="optional">
            <annotation>
                <documentation>
                    A unique ID for this policy that may serve as the reference for the dgitial signature.
                </documentation>
            </annotation>
        </attribute>
    </complexType>

    <element name="AttributeRule" type="afp:AttributeRuleType">
        <annotation>
            <documentation>A rule that describes how values of an attribute will be filtered.</documentation>
        </annotation>
    </element>
    <complexType name="AttributeRuleType">
        <sequence>
            <element ref="afp:FilterPolicy" maxOccurs="unbounded">
                <annotation>
                    <documentation>
                        A policy that defines the set of attribute value filters that will be applied if its application
                        requirements are met.
                    </documentation>
                </annotation>
            </element>
        </sequence>
        <attribute name="attributeID" type="string" use="required">
            <annotation>
                <documentation>The unique ID of the attribute to which this rule applies.</documentation>
            </annotation>
        </attribute>
    </complexType>

    <element name="FilterPolicy" type="afp:FilterPolicyType">
        <annotation>
            <documentation>
                A policy that defines the set of attribute value filters that will be applied if its application
                requirements are met.
            </documentation>
        </annotation>
    </element>
    <complexType name="FilterPolicyType">
        <sequence>
            <element ref="afp:ApplicationRequirement">
                <annotation>
                    <documentation>
                        A requirement that if met signals that this filter policy should be used.
                    </documentation>
                </annotation>
            </element>
            <element ref="afp:ValueFilter">
                <annotation>
                    <documentation>
                        A filter for attribute values. If any filter for a value evaluates to false the value is
                        filtered out. If all filters evaluate to true the value is kept and released.
                    </documentation>
                </annotation>
            </element>
        </sequence>
    </complexType>

    <element name="ApplicationRequirement" type="afp:MatchFunctorType">
        <annotation>
            <documentation>A requirement that if met signals that this filter policy should be used.</documentation>
        </annotation>
    </element>
    <element name="ValueFilter" type="afp:MatchFunctorType">
        <annotation>
            <documentation>
                A filter for attribtue values. If any filter for a value evaluates to false the value is filtered out.
                If all filters evaluate to true the value is kept and released.
            </documentation>
        </annotation>
    </element>
    <complexType name="MatchFunctorType" abstract="true">
        <attribute name="id" type="ID">
            <annotation>
                <documentation>
                    A unique ID for this match functor.  This allows the functor to be declared globally and referenced within individual rules.
                </documentation>
            </annotation>
        </attribute>
        <attribute name="ref" type="IDREF">
            <annotation>
                <documentation>
                    Used to reference a globally defined functor.
                </documentation>
            </annotation>
        </attribute>
        <attribute name="negateResult" type="boolean" default="false">
            <annotation>
                <documentation>
                    Used to negate the result of a match evaluation.
                </documentation>
            </annotation>
        </attribute>
    </complexType>

</schema>