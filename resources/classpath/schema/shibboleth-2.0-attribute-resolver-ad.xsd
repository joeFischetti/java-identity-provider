<?xml version="1.0" encoding="UTF-8"?>

<schema targetNamespace="urn:mace:shibboleth:2.0:resolver:ad" xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:ad="urn:mace:shibboleth:2.0:resolver:ad" xmlns:resolver="urn:mace:shibboleth:2.0:resolver"
    elementFormDefault="qualified">

    <import namespace="urn:mace:shibboleth:2.0:resolver"
        schemaLocation="classpath:/schema/shibboleth-2.0-attribute-resolver.xsd" />

    <complexType name="Simple">
        <annotation>
            <documentation>A basic attribute definition.</documentation>
        </annotation>
        <complexContent>
            <extension base="resolver:BaseAttributeDefinitionType" />
        </complexContent>
    </complexType>

    <complexType name="PrincipalName">
        <annotation>
            <documentation>Exposes the principal's name as an attribute definition.</documentation>
        </annotation>
        <complexContent>
            <extension base="resolver:BaseAttributeDefinitionType" />
        </complexContent>
    </complexType>

    <complexType name="PrincipalAuthenticationMethod">
        <annotation>
            <documentation>Exposes the principal's authentication method as an attribute definition.</documentation>
        </annotation>
        <complexContent>
            <extension base="resolver:BaseAttributeDefinitionType" />
        </complexContent>
    </complexType>

    <complexType name="TransientId">
        <annotation>
            <documentation>A attribute definition used to construct transient subejct identifiers.</documentation>
        </annotation>
        <complexContent>
            <extension base="resolver:BaseAttributeDefinitionType">
                <attribute name="storageServiceRef" type="string" default="shibboleth.StorageService">
                    <annotation>
                        <documentation>Storage service used to store created identifiers</documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="Scoped">
        <annotation>
            <documentation>A basic attribute definition which supports attribute scoping.</documentation>
        </annotation>
        <complexContent>
            <extension base="resolver:BaseAttributeDefinitionType">
                <attribute name="scope" type="string" use="required">
                    <annotation>
                        <documentation>Value to use for scoping the attribute.</documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="Script">
        <annotation>
            <documentation>
                An attribute definition that constructs its attributes by means of a script supported by JSR-223. The
                script is provided all the edu.internet2.middleware.shibboleth.common.attribute.Attribute object
                resolved from all the definitions dependencies. The resultant attribute definition must then be bound to
                script attribute corresponding to the script variable whose name is the ID of the definition. This
                variable is injected into the script by the attribute definition.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="resolver:BaseAttributeDefinitionType">
                <choice>
                    <element name="Script" type="string" minOccurs="0">
                        <annotation>
                            <documentation>The script to evaluate to construct the attribute.</documentation>
                        </annotation>
                    </element>
                    <element name="ScriptFile" type="string" minOccurs="0">
                        <annotation>
                            <documentation>
                                The filesystem path to the script to evaluate to construct the attribute.
                            </documentation>
                        </annotation>
                    </element>
                </choice>
                <attribute name="language" type="string" default="javascript">
                    <annotation>
                        <documentation>
                            The JSR-233 name for the scripting language that will be used. By default "javascript" is
                            supported.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="Mapped">
        <annotation>
            <documentation>
                The mapped attribute definition performs a many to many mapping from source attributes values provided
                by the definition's dependencies to values which are returned. Each source value is passed through each
                defined ValueMap which may result in one or more resulting values. If no ValueMaps match the source
                value and a DefaultValue is defined, the DefaultValue is used.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="resolver:BaseAttributeDefinitionType">
                <sequence>
                    <element name="DefaultValue" minOccurs="0">
                        <annotation>
                            <documentation>
                                A source value is mapped to the DefaultValue if none of the ValueMaps result in a match.
                                This string may not contain regular expression back references.
                            </documentation>
                        </annotation>
                        <complexType>
                            <simpleContent>
                                <extension base="string">
                                    <attribute name="passThru" type="boolean" default="false">
                                        <annotation>
                                            <documentation>
                                                If true, the source value is passed thru unmodified. If passThru is
                                                enabled, DefaultValue may not contain a string value.
                                            </documentation>
                                        </annotation>
                                    </attribute>
                                </extension>
                            </simpleContent>
                        </complexType>
                    </element>
                    <element name="ValueMap" type="ad:ValueMapType" maxOccurs="unbounded" />
                </sequence>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="ValueMapType">
        <annotation>
            <documentation>
                Performs many to one mapping of source values to a return value. SourceValue strings may include regular
                expressions and the ReturnValue may include back references to capturing groups as supported by
                java.util.regex.Pattern.
            </documentation>
        </annotation>
        <sequence>
            <element name="ReturnValue" type="string">
                <annotation>
                    <documentation>The value to be returned from this value map.</documentation>
                </annotation>
            </element>
            <element name="SourceValue" maxOccurs="unbounded">
                <annotation>
                    <documentation>A regular expression string to be matched against the incoming value.</documentation>
                </annotation>
                <complexType>
                    <simpleContent>
                        <extension base="string">
                            <attribute name="ignoreCase" type="boolean" default="false">
                                <annotation>
                                    <documentation>If true, value matching will be case-insensitive.</documentation>
                                </annotation>
                            </attribute>
                            <attribute name="partialMatch" type="boolean" default="false">
                                <annotation>
                                    <documentation>
                                        If true, the SourceValue may match only a substring of the incoming value. By
                                        default, it must match the entire value.
                                    </documentation>
                                </annotation>
                            </attribute>
                        </extension>
                    </simpleContent>
                </complexType>
            </element>
        </sequence>
    </complexType>

    <complexType name="Template">
        <annotation>
            <documentation></documentation>
        </annotation>
        <complexContent>
            <extension base="resolver:BaseAttributeDefinitionType">
                <sequence>
                    <element name="Template" type="string" minOccurs="0">
                        <annotation>
                            <documentation>
                                Template specified in the Velocity Template Language used to construct attribute values.
                            </documentation>
                        </annotation>
                    </element>
                    <element name="SourceAttribute" type="string" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                Attribute IDs which should be used in this definition, rather than the sourceAttributeID
                                attribute. Each source attribute is available to be used in the Template as
                                ${attribute_name}.
                            </documentation>
                        </annotation>
                    </element>
                </sequence>
                <attribute name="velocityEngine" type="string" fixed="shibboleth.VelocityEngine">
                    <annotation>
                        <documentation>Name of the velocity engine defined within the application.</documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>

</schema>