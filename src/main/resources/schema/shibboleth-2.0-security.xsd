<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" 
        targetNamespace="urn:mace:shibboleth:2.0:security" 
        xmlns:sec="urn:mace:shibboleth:2.0:security"
        elementFormDefault="qualified">
        
    <!-- CREDENTIAL RELATED OBJECTS -->
    <element name="Credential" type="sec:CredentialType" />

    <complexType name="X509Inline">
        <annotation>
            <documentation>
                Allows credentials to be components to be specified as content within the child elements. Keys,
                Certificates, and CRLs may be PKCS#12, DER, or PEM encoded and may be encrypted or not.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:X509Credential" />
        </complexContent>
    </complexType>

    <complexType name="X509Filesystem">
        <annotation>
            <documentation>
                Allows credential components to be specified by filesystem path. Keys, Certificates, and CRLs may be
                PKCS#12, DER, or PEM encoded and may be encrypted or not.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:X509Credential" />
        </complexContent>
    </complexType>

    <complexType name="X509Credential" abstract="true">
        <annotation>
            <documentation>
                Defines the components of an X.509 credential.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:CredentialType">
                <sequence>
                    <element name="PrivateKey" type="sec:PasswordBearingString" minOccurs="0">
                        <annotation>
                            <documentation>Credential's RSA/DSA private key.</documentation>
                        </annotation>
                    </element>
                    <element name="Certificate" minOccurs="1" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                Certificate associated with the credential. More than one certificate
                                may be present within a single element, if the encoding form used allows
                                it, or multiple certificate elements may be used, or both.
                            </documentation>
                        </annotation>
                        <complexType>
                            <simpleContent>
                                <extension base="sec:PasswordBearingString">
                                    <attribute name="entityCertificate" type="boolean"
                                        default="false">
                                        <annotation>
                                            <documentation>
                                                Indicates that this certificate is the end entity
                                                certificate within this chain.
                                            </documentation>
                                        </annotation>
                                    </attribute>
                                </extension>
                            </simpleContent>
                        </complexType>
                    </element>
                    <element name="CRL" type="sec:PasswordBearingString" minOccurs="0"
                        maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                Certificate revocation list associated with the Credential. More than
                                one CRL may be present within a single element, if the encoding form
                                used allows it, or multiple CRL elements may be used, or both.
                            </documentation>
                        </annotation>
                    </element>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="BasicInline">
        <annotation>
            <documentation>
                Allows credentials to be components to be specified as content within the child elements.
                Keys may be PKCS#12, DER, or PEM encoded and may be encrypted or not.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:BasicCredential"/>
        </complexContent>
    </complexType>
    
    <complexType name="BasicFilesystem">
        <annotation>
            <documentation>
                Allows credential components to be specified by filesystem path.
                Keys may be PKCS#12, DER, or PEM encoded and may be encrypted or not.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:BasicCredential" />
        </complexContent>
    </complexType>
    
    <complexType name="BasicCredential" abstract="true">
        <annotation>
            <documentation>
                Defines the components of a basic credential containing either a 
                public key and optional private key, or a symmetric (secret) key.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:CredentialType">
                <sequence>
                    <choice>
                        <element name="SecretKey" type="sec:PasswordBearingString">
                            <annotation>
                                <documentation>Credential's symmetric key.</documentation>
                            </annotation>
                        </element>
                        <sequence>
                            <element name="PrivateKey" type="sec:PasswordBearingString" minOccurs="0">
                                <annotation>
                                    <documentation>Credential's RSA/DSA private key.</documentation>
                                </annotation>
                            </element>
                            <element name="PublicKey" type="sec:PasswordBearingString">
                                <annotation>
                                    <documentation>Credential's RSA/DSA public key.</documentation>
                                </annotation>
                            </element>
                        </sequence>
                    </choice>
                </sequence>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="CredentialType" abstract="true">
        <annotation>
            <documentation>Base type for credential information.</documentation>
        </annotation>
        <sequence>
            <element name="KeyName" type="string" minOccurs="0" maxOccurs="unbounded">
                <annotation>
                    <documentation>Name(s) of the key this credential represents.</documentation>
                </annotation>
            </element>
        </sequence>
        <attribute name="id" type="string">
            <annotation>
                <documentation>Unique id for this credential.</documentation>
            </annotation>
        </attribute>
        <attribute name="entityID" type="string">
            <annotation>
                <documentation>Identifier for the entity which owns this credential.</documentation>
            </annotation>
        </attribute>
        <attribute name="usage" type="sec:CredentialUsageType">
            <annotation>
                <documentation>
                    Usage type for this credential. Acceptable values are "Encryption" or "Signing". If no usage type is
                    given components may choose to use the credential for either encryption or signing operations.
                </documentation>
            </annotation>
        </attribute>
    </complexType>

    <simpleType name="CredentialUsageType">
        <restriction base="string">
            <enumeration value="Encryption" />
            <enumeration value="Signing" />
        </restriction>
    </simpleType>

    <complexType name="PasswordBearingString">
        <simpleContent>
            <extension base="string">
                <attribute name="password" type="string">
                    <annotation>
                        <documentation>
                            Password associated with the resource identified by elements of this type.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </simpleContent>
    </complexType>
    
    <!-- VALIDATION RELATED OBJECTS, FOR EXAMPLE PKIX INFO -->
    <element name="ValidationInfo" type="sec:ValidationInfoType" />
    
    <complexType name="PKIXInline">
        <annotation>
            <documentation>
                Allows PKIX validation info components to be specified as content within the child elements.
                Certificates and CRLs may be PKCS#12, DER, or PEM encoded and may be encrypted or not.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:PKIXValidationInfoType" />
        </complexContent>
    </complexType>
    
    <complexType name="PKIXFilesystem">
        <annotation>
            <documentation>
                Allows PKIX validation info components to be specified by filesystem path.
                Certificates, and CRLs may be PKCS#12, DER, or PEM encoded and may be encrypted or not.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:PKIXValidationInfoType" />
        </complexContent>
    </complexType>
    
    <complexType name="PKIXValidationInfoType" abstract="true">
        <annotation>
            <documentation>
                Defines the components of a set of PKIX validation information.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:ValidationInfoType">
                <sequence>
                    <element name="Certificate" type="sec:PasswordBearingString" minOccurs="0" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                Trusted certificates, typically of root and intermediate CA's , which are used
                                as input to the PKIX validation process.
                            </documentation>
                        </annotation>
                    </element>
                    <element name="CRL" type="sec:PasswordBearingString" minOccurs="0" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                Certificate revocation lists which are used as input to the PKIX validation process.
                            </documentation>
                        </annotation>
                    </element>
                </sequence>
                <attribute name="VerifyDepth" type="unsignedByte" use="optional" default="1">
                    <annotation>
                        <documentation>
                            The maximum path verification depth to consider when constructing a PKIX cert path.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="ValidationInfoType" abstract="true">
        <annotation>
            <documentation>Base type for validation information.</documentation>
        </annotation>
        <attribute name="id" type="string" use="required">
            <annotation>
                <documentation>Unique id for this validation info set.</documentation>
            </annotation>
        </attribute>
    </complexType>
    
    <!-- TRUST ENGINE RELATED OBJECTS -->
    <element name="TrustEngine" type="sec:TrustEngineType" />
    
    <complexType name="Chaining">
        <annotation>
            <documentation>
                Trust engine which chains together other trust engine instances, evaluating a token
                against each engine in chain order.
                
                If the token to be evaluated can be established as trusted by one member of the chain,
                then the token is trusted.  Otherwise it is evaluated as untrusted.
                
                Trust chain members must all evaluate tokens of a compatible type,
                for example a Credential or Signature.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:TrustEngineType">
                <choice minOccurs="1" maxOccurs="unbounded">
                    <element ref="sec:TrustEngine" />
                    <element name="TrustEngineRef">
                        <annotation>
                            <documentation>Reference to a trust engine.</documentation>
                        </annotation>
                        <complexType>
                            <attribute name="ref">
                                <annotation>
                                    <documentation>Bean reference id for a trust engine declared elsewhere.</documentation>
                                </annotation>
                            </attribute>
                        </complexType>
                    </element>
                </choice>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="SignatureChaining">
        <annotation>
            <documentation>
                Trust engine which chains together other signature trust engine instances, evaluating the signature
                against each engine in chain order.
                
                If the signature to be evaluated can be established as trusted by one member of the chain,
                then the signature is trusted.  Otherwise it is evaluated as untrusted.
                
                Trust chain members must all evaluate signatures.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:TrustEngineType">
                <choice minOccurs="1" maxOccurs="unbounded">
                    <element ref="sec:TrustEngine" />
                    <element name="TrustEngineRef">
                        <annotation>
                            <documentation>Reference to a trust engine.</documentation>
                        </annotation>
                        <complexType>
                            <attribute name="ref">
                                <annotation>
                                    <documentation>Bean reference id for a trust engine declared elsewhere.</documentation>
                                </annotation>
                            </attribute>
                        </complexType>
                    </element>
                </choice>
            </extension>
        </complexContent>
    </complexType>
    
    <!-- Trust engines which use metadata provider-based resolvers -->
    <complexType name="MetadataExplicitKey">
        <annotation>
            <documentation>
                Trust engine used to validate a key against trusted keys obtained from metadata.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:TrustEngineType">
                <attribute name="metadataProviderRef" type="string" use="required">
                    <annotation>
                        <documentation>
                            The ID of the metadata provider used to look up trust information.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="MetadataPKIXX509Credential">
        <annotation>
            <documentation>
                Trust engine used to validate an X509 credential against PKIX information from metadata.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:TrustEngineType">
                <attribute name="metadataProviderRef" type="string" use="required">
                    <annotation>
                        <documentation>
                            The ID of the metadata provider used to look up trust information.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="MetadataExplicitKeySignature">
        <annotation>
            <documentation>
                Trust engine used to validate signatures with keys from metadata.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:TrustEngineType">
                <attribute name="metadataProviderRef" type="string" use="required">
                    <annotation>
                        <documentation>
                            The ID of the metadata provider used to look up trust information.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="MetadataPKIXSignature">
        <annotation>
            <documentation>
                Trust engine used to validate signatures with PKIX-validated certificates from metadata.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:TrustEngineType">
                <attribute name="metadataProviderRef" type="string" use="required">
                    <annotation>
                        <documentation>
                            The ID of the metadata provider used to look up trust information.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    
    <!-- Trust engines which use resolvers configured via static information -->
    <complexType name="StaticExplicitKey">
        <annotation>
            <documentation>
                Trust engine used to validate a key against statically-configured trusted keys.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:TrustEngineType">
                <sequence>
                    <element ref="sec:Credential" minOccurs="1" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                A trusted credential to be included in the static trusted credential set.
                            </documentation>
                        </annotation>
                    </element>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="StaticPKIXX509Credential">
        <annotation>
            <documentation>
                Trust engine used to validate an X509 credential against statically-configured PKIX information.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:TrustEngineType">
                <sequence>
                    <element ref="sec:ValidationInfo" minOccurs="1" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                PKIX validation info against which to validate an X509 credential.
                            </documentation>
                        </annotation>
                    </element>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="StaticExplicitKeySignature">
        <annotation>
            <documentation>
                Trust engine used to validate a signature against statically-configured trusted keys.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:TrustEngineType">
                <sequence>
                    <element ref="sec:Credential" minOccurs="1" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                A trusted credential to be included in the static trusted credential set.
                            </documentation>
                        </annotation>
                    </element>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="StaticPKIXSignature">
        <annotation>
            <documentation>
                Trust engine used to validate signatures against statically-configured PKIX information.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:TrustEngineType">
                <sequence>
                    <element ref="sec:ValidationInfo" minOccurs="1" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                PKIX validation info against which to validate a signature.
                            </documentation>
                        </annotation>
                    </element>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="TrustEngineType" abstract="true">
        <attribute name="id" type="string" use="required">
            <annotation>
                <documentation>
                    Unique ID of the trust engine.
                </documentation>
            </annotation>
        </attribute>
    </complexType>
    
    <!-- SECURITY POLICY RELATED OBJECTS -->
    <element name="SecurityPolicy" type="sec:SecurityPolicyType" />
    <complexType name="SecurityPolicyType">
        <annotation>
            <documentation>
                Security policies define a set of rules that are evaluated against incoming messages to
                determine whether the messages should be processed.
            </documentation>
        </annotation>
        <sequence>
            <element ref="sec:Rule" minOccurs="0" maxOccurs="unbounded" />
        </sequence>
        <attribute name="id" type="string" use="required">
            <annotation>
                <documentation>
                    A unique ID for the policy.
                </documentation>
            </annotation>
        </attribute>
    </complexType>

    <element name="Rule" type="sec:SecurityPolicyRuleType" />
    
    <complexType name="MandatoryMessageAuthentication">
        <annotation>
            <documentation>
                A security rule that requires that an incoming message be authenticated.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:SecurityPolicyRuleType" />
        </complexContent>
    </complexType>
    
    <complexType name="ClientCertAuth">
        <annotation>
            <documentation>
                A security rule that validates a client certificate, available from the inbound transport, with a trust engine.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="sec:SecurityPolicyRuleType">
                <attribute name="trustEngineRef" type="string" use="required">
                    <annotation>
                        <documentation>
                            Reference to the trust engine used to validate the signature. 
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="SecurityPolicyRuleType" abstract="true">
        <annotation>
            <documentation>
                Base type of security policy rules.
            </documentation>
        </annotation>
    </complexType>
</schema>