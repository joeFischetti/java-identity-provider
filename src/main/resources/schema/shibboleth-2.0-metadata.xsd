<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:mace:shibboleth:2.0:metadata"
    xmlns:shibmd="urn:mace:shibboleth:2.0:metadata" xmlns:res="urn:mace:shibboleth:2.0:resource"
    xmlns:saml2md="urn:oasis:names:tc:SAML:2.0:metadata" elementFormDefault="qualified">
    
    <annotation>
        <documentation>Schema describing metadata providers and filters.</documentation>
    </annotation>
    
    <import namespace="urn:oasis:names:tc:SAML:2.0:metadata"
        schemaLocation="classpath:/schema/saml-schema-metadata-2.0.xsd" />
    <import namespace="urn:mace:shibboleth:2.0:resource"
        schemaLocation="classpath:/schema/shibboleth-2.0-resource.xsd" />
        
    <element name="MetadataProvider" type="shibmd:MetadataProviderType">
        <annotation>
            <documentation>Defines a provider of SAML 2 metadata information.</documentation>
        </annotation>
    </element>
    <complexType name="ChainingMetadataProvider">
        <annotation>
            <documentation>
                A metadata provider that composes other metadata providers. During a lookup operation member providers
                are searched in the order they listed in this providers configuration until one provides a response to
                the lookup. That response is then returned, no subsequent member providers are inspected. Note, that
                metadata filters and the require valid metadata flag expressed on this configuration overrides those
                settings on member providers.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="shibmd:MetadataProviderType">
                <sequence>
                    <element ref="shibmd:MetadataProvider" minOccurs="0" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                A member metadata provider that will be searched for information.
                            </documentation>
                        </annotation>
                    </element>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="ResourceBackedMetadataProvider">
        <annotation>
            <documentation>A metadata provider that reads metadata from a Resource.</documentation>
        </annotation>
        <complexContent>
            <extension base="shibmd:MetadataProviderType">
                <sequence>
                    <element name="MetadataResource" type="res:ResourceType">
                        <annotation>
                            <documentation>The resource from which metadata will be read.</documentation>
                        </annotation>
                    </element>
                </sequence>
                <attribute name="parserPoolRef" type="string">
                    <annotation>
                        <documentation>
                            A reference to the parser pool.  By default 'shibboleth.ParserPool' is assumed.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="InlineMetadataProvider">
        <annotation>
            <documentation>A metadata provider that allows SAML 2 metadata to be specified inline.</documentation>
        </annotation>
        <complexContent>
            <extension base="shibmd:MetadataProviderType">
                <choice>
                    <element ref="saml2md:EntitiesDescriptor">
                        <annotation>
                            <documentation>A SAML 2 metadata EntitiesDescriptor declaration.</documentation>
                        </annotation>
                    </element>
                    <element ref="saml2md:EntityDescriptor">
                        <annotation>
                            <documentation>A SAML 2 metadata EntitiesDescriptor declaration.</documentation>
                        </annotation>
                    </element>
                </choice>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="FileBackedHTTPMetadataProvider">
        <annotation>
            <documentation>
                A metadata provider that periodically pulls metadata from a given URL. If the metadata is valid it is
                stored to disk. If the the provided URL can not be reached or the metadata retrieved is invalid this
                provider will fall back to its on-disk copy.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="shibmd:HTTPMetadataProvider">
                <attribute name="backingFile" type="string" use="required">
                    <annotation>
                        <documentation>
                            The path to the temporary file used to store valid metadata on-disk.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="HTTPMetadataProvider">
        <annotation>
            <documentation>A metadata provider that periodically pulls metadata from a given URL.</documentation>
        </annotation>
        <complexContent>
            <extension base="shibmd:MetadataProviderType">
                <attribute name="metadataURL" type="anyURI" use="required">
                    <annotation>
                        <documentation>The URL from which to retrieve the metadata.</documentation>
                    </annotation>
                </attribute>
                <attribute name="maintainExpiredMetadata" type="boolean">
                    <annotation>
                        <documentation>
                            A boolean flag indicating whether expired metadata should continue to be used until such
                            time as fresh metadata can be retrieved from the remote server.
                        </documentation>
                    </annotation>
                </attribute>
                <attribute name="cacheDuration" type="unsignedInt">
                    <annotation>
                        <documentation>
                            The maximum length of time, in seconds, to cache metadata. If the metadata specifies a
                            shorter duration, either through a cache duration of explicit expiration time, then that
                            duration will be used.
                        </documentation>
                    </annotation>
                </attribute>
                <attribute name="requestTimeout" type="unsignedInt">
                    <annotation>
                        <documentation>
                            The maximum length of time, in milliseconds, to wait for the remote server to response.
                        </documentation>
                    </annotation>
                </attribute>
                <attribute name="basicAuthUser" type="string">
                    <annotation>
                        <documentation>
                            The user name to provide, during basic authentication, when connecting to the remote server.
                        </documentation>
                    </annotation>
                </attribute>
                <attribute name="basicAuthPassword" type="string">
                    <annotation>
                        <documentation>
                            The password to provide, during basic authentication, when connecting to the remote server.
                        </documentation>
                    </annotation>
                </attribute>
                <!-- Need to deal with socket factory -->
            </extension>
        </complexContent>
    </complexType>
    <complexType name="FilesystemMetadataProvider">
        <annotation>
            <documentation>A metatadata provider that reads SAML2 metadata from the filesystem.</documentation>
        </annotation>
        <complexContent>
            <extension base="shibmd:MetadataProviderType">
                <attribute name="metadataFile" type="string" use="required">
                    <annotation>
                        <documentation>The path to the metadata file.</documentation>
                    </annotation>
                </attribute>
                <attribute name="maintainExpiredMetadata" type="boolean">
                    <annotation>
                        <documentation>
                            A boolean flag indicating whether expired metadata should continue to be used until such
                            time as fresh metadata can be retrieved from the remote server.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="MetadataProviderType" abstract="true">
        <sequence>
            <element ref="shibmd:MetadataFilter" minOccurs="0">
                <annotation>
                    <documentation>
                        A filter to be applied to metadata after it has been parsed and validated.
                    </documentation>
                </annotation>
            </element>
        </sequence>
        <attribute name="id" type="ID" use="required">
            <annotation>
                <documentation>A unique identifier that may be used to identify a particular provider</documentation>
            </annotation>
        </attribute>
        <attribute name="requireValidMetadata" type="boolean">
            <annotation>
                <documentation>
                    A boolean flag indicating whether the metadata retrieved must be valid. At a minimum, metadata is
                    valid only if the date expressed in entity's validUntil attribute has not passed. Specific
                    implementations may add additional constraints.
                </documentation>
            </annotation>
        </attribute>
    </complexType>
    <element name="MetadataFilter" type="shibmd:MetadataFilterType">
        <annotation>
            <documentation>
                Defines a filter that is applied to SAML2 metadata after it has been parsed and validated. Filters may
                be used to remove unnecessary information or perform other transformative logic.
            </documentation>
        </annotation>
    </element>
    <complexType name="ChainingFilter">
        <annotation>
            <documentation>
                A filter that executes other filters in the order they appear in the configuration.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="shibmd:MetadataFilterType">
                <sequence>
                    <element ref="shibmd:MetadataFilter" minOccurs="0" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                A filter to be applied to metadata after it has been parsed and validated.
                            </documentation>
                        </annotation>
                    </element>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="SchemaValidation">
        <annotation>
            <documentation>
                A filter that checks, and optionally requires, the signature on the top level of the incoming metadata.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="shibmd:MetadataFilterType">
                <sequence>
                    <element name="ExtensionSchema" type="string" minOccurs="0" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                Classpath location of schema files that will be used, in addition to those included in
                                OpenSAML, to validate an incoming metadata file.
                            </documentation>
                        </annotation>
                    </element>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="SignatureValidation">
        <annotation>
            <documentation>
                A filter that checks, and optionally requires, the signature on the top level of the incoming metadata.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="shibmd:MetadataFilterType">
                <attribute name="trustEngineRef" use="required">
                    <annotation>
                        <documentation>The ID of the trust engine used to validate the signature.</documentation>
                    </annotation>
                </attribute>
                <attribute name="requireSignedMetadata" type="boolean">
                    <annotation>
                        <documentation>
                            A boolean flag indicating whether a signature is required on incoming metadata.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="EntityRoleWhiteList">
        <annotation>
            <documentation>
                A filter that removes roles, from an entity descriptor, that do not appear in the filters whitelist.
                Optionally an entity descriptor may be completely removed if it does not contain at least one role after
                the filter. Entity descriptors may be removed if they do not contain at least one entity or entities
                descriptor after the filtering.
            </documentation>
        </annotation>
        <complexContent>
            <extension base="shibmd:MetadataFilterType">
                <sequence>
                    <element name="RetainedRole" type="QName" minOccurs="0" maxOccurs="unbounded">
                        <annotation>
                            <documentation>
                                The effective QName for the roles which should not NOT be removed by the filter. The
                                effective name is the element name for those roles defined within the SAML metadata
                                specification and the schema type name for those that are not.
                            </documentation>
                        </annotation>
                    </element>
                </sequence>
                <attribute name="removeRolelessEntityDescriptors" type="boolean">
                    <annotation>
                        <documentation>
                            A boolean flag indicating that entity descriptors that do not contain at least one role,
                            after filtering, should be removed.
                        </documentation>
                    </annotation>
                </attribute>
                <attribute name="removeEmptyEntitiesDescriptors" type="boolean">
                    <annotation>
                        <documentation>
                            A boolean flag indicating that entities descriptors that do not contain at least one entity
                            or entities descriptor, after filtering, shouldbe removed.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="MetadataFilterType" abstract="true" />
</schema>