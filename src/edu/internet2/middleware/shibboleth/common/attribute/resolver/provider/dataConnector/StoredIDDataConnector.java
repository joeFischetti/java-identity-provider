/*
 * Copyright [2007] [University Corporation for Advanced Internet Development, Inc.]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package edu.internet2.middleware.shibboleth.common.attribute.resolver.provider.dataConnector;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.sql.DataSource;

import org.opensaml.xml.util.Base64;
import org.opensaml.xml.util.DatatypeHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import edu.internet2.middleware.shibboleth.common.attribute.BaseAttribute;
import edu.internet2.middleware.shibboleth.common.attribute.provider.BasicAttribute;
import edu.internet2.middleware.shibboleth.common.attribute.resolver.AttributeResolutionException;
import edu.internet2.middleware.shibboleth.common.attribute.resolver.provider.ShibbolethResolutionContext;
import edu.internet2.middleware.shibboleth.common.attribute.resolver.provider.dataConnector.StoredIDStore.PersistentIdEntry;
import edu.internet2.middleware.shibboleth.common.profile.provider.SAMLProfileRequestContext;

/**
 * A data connector that generates persistent identifiers in one of two ways. The generated attribute has an ID of
 * <tt>peristentId</tt> and contains a single {@link String} value.
 * 
 * If a salt is supplied at construction time the generated IDs will be the Base64-encoded SHA-1 hash of the user's
 * principal name, the peer entity ID, and the salt.
 * 
 * If a {@link DataSource} is supplied the IDs are created and managed as described by {@link StoredIDStore}.
 */
public class StoredIDDataConnector extends BaseDataConnector {

    /** Class logger. */
    private final Logger log = LoggerFactory.getLogger(StoredIDDataConnector.class);

    /** Persistent identifier data store. */
    private StoredIDStore pidStore;

    /** ID of the attribute generated by this data connector. */
    private String generatedAttribute;

    /** ID of the attribute whose first value is used when generating the computed ID. */
    private String sourceAttribute;

    /** Salt used when computing the ID. */
    private byte[] salt;

    /**
     * Constructor.
     * 
     * @param source datasource used to communicate with the database
     * @param generatedAttributeId ID of the attribute generated by this data connector
     * @param sourceAttributeId ID of the attribute whose first value is used when generating the computed ID
     * @param idSalt salt used when computing the ID
     */
    public StoredIDDataConnector(DataSource source, String generatedAttributeId, String sourceAttributeId, byte[] idSalt) {
        if(source == null){
            throw new IllegalArgumentException("Data source may not be null");
        }
        pidStore = new StoredIDStore(source);
        
        if (DatatypeHelper.isEmpty(generatedAttributeId)) {
            throw new IllegalArgumentException("Provided generated attribute ID must not be empty");
        }
        generatedAttribute = generatedAttributeId;
        
        if (DatatypeHelper.isEmpty(sourceAttributeId)) {
            throw new IllegalArgumentException("Provided source attribute ID must not be empty");
        }
        sourceAttribute = sourceAttributeId;

        if (idSalt.length < 16) {
            throw new IllegalArgumentException("Provided salt must be at least 16 bytes in size.");
        }
        salt = idSalt;
    }

    /**
     * Gets the salt used when computing the ID.
     * 
     * @return salt used when computing the ID
     */
    public byte[] getSalt() {
        return salt;
    }

    /**
     * Gets the ID of the attribute whose first value is used when generating the computed ID.
     * 
     * @return ID of the attribute whose first value is used when generating the computed ID
     */
    public String getSourceAttributeId() {
        return sourceAttribute;
    }

    /**
     * Gets the ID of the attribute generated by this connector.
     * 
     * @return ID of the attribute generated by this connector
     */
    public String getGeneratedAttributeId() {
        return generatedAttribute;
    }

    /** {@inheritDoc} */
    protected BaseAttribute<String> doResolve(ShibbolethResolutionContext resolutionContext)
            throws AttributeResolutionException {

        String persistentId = null;

        BasicAttribute<String> attribute = new BasicAttribute<String>();
        attribute.setId(getId());
        attribute.getValues().add(persistentId);
        return attribute;
    }

    /** {@inheritDoc} */
    public Map<String, BaseAttribute> resolve(ShibbolethResolutionContext resolutionContext)
            throws AttributeResolutionException {
        String persistentId = getStoredId(resolutionContext);
        BasicAttribute<String> attribute = new BasicAttribute<String>();
        attribute.setId(getGeneratedAttributeId());
        attribute.getValues().add(persistentId);

        Map<String, BaseAttribute> attributes = new HashMap<String, BaseAttribute>();
        attributes.put(attribute.getId(), attribute);
        return attributes;
    }
    
    /** {@inheritDoc} */
    public void validate() throws AttributeResolutionException {
        if(getDependencyIds() == null || getDependencyIds().size() != 1){
            log.error("Computed ID " + getId() + " data connectore requires exactly one dependency");
            throw new AttributeResolutionException("Computed ID " + getId() + " data connectore requires exactly one dependency");
        }
    }
    
    /**
     * Gets the persistent ID stored in the database. If one does not exist it is created.
     * 
     * @param resolutionContext current resolution context
     * 
     * @return persistent ID
     * 
     * @throws AttributeResolutionException thrown if there is a problem retrieving or storing the persistent ID
     */
    protected String getStoredId(ShibbolethResolutionContext resolutionContext) throws AttributeResolutionException {
        SAMLProfileRequestContext requestCtx = resolutionContext.getAttributeRequestContext();

        try {
            PersistentIdEntry idEntry = pidStore.getActivePersistentIdEntry(requestCtx.getPrincipalName(), requestCtx
                    .getInboundMessageIssuer(), requestCtx.getLocalEntityId());
            if (idEntry != null) {
                return idEntry.getPersistentId();
            } else {
                return pidStore.createPersisnentId(requestCtx.getPrincipalName(), requestCtx.getInboundMessageIssuer(),
                        requestCtx.getLocalEntityId(), null);
            }
        } catch (SQLException e) {
            log.error("Database error retrieving persistent identifier", e);
            throw new AttributeResolutionException("Database error retrieving persistent identifier", e);
        }
    }

    /**
     * Generates a persistent ID by hash.
     * 
     * @param resolutionContext current resolution context
     * 
     * @return generated ID
     * 
     * @throws AttributeResolutionException thrown if SHA-1 is not supported by the VM
     */
    protected String generateHashedId(ShibbolethResolutionContext resolutionContext)
            throws AttributeResolutionException {
        
        Collection<Object> sourceIdValues = getValuesFromAllDependencies(resolutionContext, getSourceAttributeId());
        if (sourceIdValues == null || sourceIdValues.isEmpty()) {
            log.error("Source attribute {} for connector {} provide no values", getSourceAttributeId(), getId());
            throw new AttributeResolutionException("Source attribute " + getSourceAttributeId() + " for connector "
                    + getId() + " provided no values");
        }

        if (sourceIdValues.size() > 0) {
            log.warn("Source attribute {} for connector {} has more than one value, only the first value is used",
                    getSourceAttributeId(), getId());
        }
        String sourceId = sourceIdValues.iterator().next().toString();

        BasicAttribute<String> computedIdAttrib = new BasicAttribute<String>();
        computedIdAttrib.setId(getGeneratedAttributeId());

        try {
            MessageDigest md = MessageDigest.getInstance("SHA");
            md.update(resolutionContext.getAttributeRequestContext().getInboundMessageIssuer().getBytes());
            md.update((byte) '!');
            md.update(sourceId.getBytes());
            md.update((byte) '!');
            md.digest(salt);

           return Base64.encodeBytes(md.digest());
        } catch (NoSuchAlgorithmException e) {
            log.error("JVM error, SHA-1 hash is not supported.");
            throw new AttributeResolutionException("SHA-1A has is not supported, unable to compute ID");
        }
    }
}