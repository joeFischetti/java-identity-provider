<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <!--
    This file provisions the IdP with information about the configured mechanisms used for managing
    subject identity information, including canonicalizing technology-specific subject names into principal
    names, and turning principal names into technology-specific forms like SAML NameIDs.
    -->

    <!-- ========================= SAML NameID Generation ========================= -->

    <!--
    These generator lists handle NameID/Nameidentifier generation going forward. By default,
    transient IDs for both SAML versions are enabled. The other examples are for persistent IDs
    and generating more one-off formats based on resolved attributes. A suggested approach is to
    control their use via release of the underlying source attribute in the filter policy rather
    than here, but you can set a property on any generator called "activationCondition" to limit
    use. 
    -->
    
    <!-- SAML 2 NameID Generation -->
    <util:list id="shibboleth.SAML2NameIDGenerators">
    
        <bean id="transient" class="net.shibboleth.idp.saml.impl.nameid.TransientSAML2NameIDGenerator"
            p:transientIdGenerator-ref="${idp.transientId.generator}" />
            
        <bean id="persistent" class="net.shibboleth.idp.saml.impl.nameid.PersistentSAML2NameIDGenerator"
            p:attributeSourceIds="#{ {'${idp.persistentId.sourceAttribute}'} }"
            p:persistentIdGenerator-ref="${idp.persistentId.generator}" />

        <bean id="email" class="net.shibboleth.idp.saml.impl.nameid.AttributeSourcedSAML2NameIDGenerator"
            p:format="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
            p:attributeSourceIds="#{ {'email'} }" />
                
    </util:list>

    <!-- SAML 1 NameIdentifier Generation -->
    <util:list id="shibboleth.SAML1NameIdentifierGenerators">
    
        <bean id="transient" class="net.shibboleth.idp.saml.impl.nameid.TransientSAML1NameIdentifierGenerator"
            p:transientIdGenerator-ref="${idp.transientId.generator}" />

        <bean id="email" class="net.shibboleth.idp.saml.impl.nameid.AttributeSourcedSAML1NameIdentifierGenerator"
            p:format="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
            p:attributeSourceIds="#{ {'email'} }" />
                
    </util:list>
    
    <!--
    These two beans enable legacy support for NameID generation in the Attribute Resolver.
    If you don't need that (or this is a new install) you can remove them.
    -->
    <bean id="shibboleth.LegacySAML1NameIdentifierGenerator"
        class="net.shibboleth.idp.saml.impl.nameid.LegacySAML1NameIdentifierGenerator" />
    <bean id="shibboleth.LegacySAML2NameIDGenerator"
        class="net.shibboleth.idp.saml.impl.nameid.LegacySAML2NameIDGenerator" />
    
    
    <!-- ========================= Java Subject -> Principal Mapping ========================= -->

    <!--
    These are lists of Subject Canonicalization flows that turn arbitrary Subject data into a string-based
    principal name that the rest of the IdP can operate on. They're used both after authentication and
    during operations like SAML attribute queries, to map the SAML Subject name into a principal name. 
    Flows are identified with an ID that corresponds to a Spring Web Flow subflow name.
    -->

    <!-- Flows used after authentication to produce canonical principal name. -->
    <util:list id="shibboleth.PostLoginSubjectCanonicalizationFlows">
        <!--
        This is the standard post-login step that returns a username derived from the login process. If you
        have more complex needs such as mapping a certificate DN into a principal name, an alternative may
        be required.
        -->
        <bean id="SubjectC14NFlow/Simple" class="net.shibboleth.idp.authn.SubjectCanonicalizationFlowDescriptor">
            <property name="activationCondition">
                <bean class="net.shibboleth.idp.authn.impl.SimpleSubjectCanonicalization.ActivationCondition" />
            </property>
        </bean>
    </util:list>
    
    <!--
    Flows used during SAML queries to reverse map NameIdentifier/NameIDs. The actual beans defining these
    flows are in a system file. Below the list are some settings that might be necessary to adjust.
    -->
    <util:list id="shibboleth.SAMLSubjectCanonicalizationFlows">

        <!--
        This is installed to support the old mechanism of using PrincipalConnectors in the attribute resolver
        to map SAML Subjects back into principals. If you don't use those (or this is a new install) you can
        remove this.
        -->
        <ref bean="SubjectC14NFlow/LegacyPrincipalConnector" />
        
        <!-- The next four are for handling transient IDs (in-storage and stateless variants). -->
        <ref bean="SubjectC14NFlow/SAML2/Transient" />
        <ref bean="SubjectC14NFlow/SAML2/CryptoTransient" />
        <ref bean="SubjectC14NFlow/SAML1/Transient" /> 
        <ref bean="SubjectC14NFlow/SAML1/CryptoTransient" /> 
        
        <!-- Handle a SAML 2 persistent ID, provided a stored strategy is in use. -->
        <!-- <ref bean="SubjectC14NFlow/SAML2/Persistent" /> -->
        
        <!--
        Finally we have beans for decoding arbitrary SAML formats directly. By default, these are turned off,
        having *no* relying parties for which they apply (see shibboleth.DirectNamePredicate below).
        -->
        <ref bean="SubjectC14NFlow/SAML2/Direct" />
        <ref bean="SubjectC14NFlow/SAML1/Direct" />
    </util:list>
    
    <!-- What SAML formats do you want to support direct mapping for? -->
    <util:list id="shibboleth.DirectNameFormats">
        <value>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</value>
        <value>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</value>
        <value>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</value>
        <value>urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName</value>
        <value>urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos</value>
    </util:list>

    <!-- Under what conditions should direct mapping be allowed? By default, never. -->
    <!-- TODO: can we override this from the tests so we can remove it here? -->
    <bean id="shibboleth.DirectNamePredicate" class="net.shibboleth.idp.profile.logic.RelyingPartyIdPredicate">
        <property name="relyingPartyIds">
            <util:list>
                <value>https://sp.example.org</value>
            </util:list>
        </property>
    </bean>
            
</beans>
