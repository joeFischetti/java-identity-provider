# Use the XML Parser SecurityManager appropriate for the chosen parser
# Sun/Oracle, comment out
# Xerces, use org.apache.xerces.util.SecurityManager
#idp.xml.securityManager = org.apache.xerces.util.SecurityManager

# Set the entityID of the IdP
idp.entityID = https://idp.example.org

# Settings for internal AES encryption key
idp.sealer.storeType = JCEKS
idp.sealer.storePath = creds/sealer.jks
idp.sealer.storePassword = password
idp.sealer.alias = idpSecretKey
idp.sealer.keyPassword = password

# Settings for public/private signing and encryption key(s)
# During decryption key rollover, point the ".2" properties at a second
# keypair, uncomment in credentials.xml, then publish it in your metadata.
idp.signing.key = ${idp.home}/creds/idp-signing.key
idp.signing.cert = ${idp.home}/creds/idp-signing.crt
idp.encryption.key = ${idp.home}/creds/idp-encryption.key
idp.encryption.cert = ${idp.home}/creds/idp-encryption.crt
#idp.encryption.key.2 = ${idp.home}/creds/idp-encryption-old.key
#idp.encryption.cert.2 = ${idp.home}/creds/idp-encryption-old.crt

# Sets the bean ID to use as a default security configuration set
#idp.security.config = shibboleth.DefaultSecurityConfiguration

# To default to SHA-1, set to shibboleth.SigningConfiguration.SHA1
#idp.signing.config = shibboleth.SigningConfiguration.SHA256

# Configures the primary server-side storage plugin
#idp.storage.StorageService = org.opensaml.storage.impl.MemoryStorageService
#idp.storage.cleanupInterval = PT10M

# Configures the primary client-side storage plugin
#idp.storage.ClientStorageService = org.opensaml.storage.impl.ServletRequestScopedStorageService

# Set to shibboleth.Conditions.False to disable the IdP session layer
#idp.session.enabled = shibboleth.Conditions.False

# Set to true to expose more detailed errors in responses to SPs
#idp.errors.detailed = false

# Set to false to skip signing of SAML response messages that signal errors
#idp.errors.signed = true

# Set if a different default view name for events and exceptions is needed
#idp.errors.defaultView = error

# Set to "shibboleth.StorageService" for server-side storage
#idp.session.StorageService = shibboleth.ClientStorageService

# Set to shibboleth.StoredTransientIdGenerator for server-side storage
#idp.transientId.generator = shibboleth.CryptoTransientIdGenerator

# Set to shibboleth.StoredPersistentIdGenerator for server-side storage
# and uncomment/name the DataSource to use
#idp.persistentId.generator = shibboleth.ComputedPersistentIdGenerator
#idp.persistentId.store = PersistentIdStore
# Set this to null to skip hash-based generation of first stored ID
#idp.persistentId.computed = shibboleth.ComputedPersistentIdGenerator
# Otherwise for computed IDs set the source attribute and salt.
idp.persistentId.sourceAttribute = changethistosomethingreal
idp.persistentId.salt = changethistosomethingrandom
#idp.persistentId.algorithm = SHA

# Comment out to disable legacy NameID generation via Attribute Resolver
idp.nameid.saml2.legacyGenerator = shibboleth.LegacySAML2NameIDGenerator
idp.nameid.saml1.legacyGenerator = shibboleth.LegacySAML1NameIdentifierGenerator

# Default NameID formats to use when nothing else is called for
#idp.nameid.saml2.default = urn:oasis:names:tc:SAML:2.0:nameid-format:transient
#idp.nameid.saml1.default = urn:mace:shibboleth:1.0:nameIdentifier

# Size of session IDs
#idp.session.idSize = 32
# Bind sessions to IP addresses
#idp.session.consistentAddress = true
# Inactivity timeout
#idp.session.timeout = PT60M
# Extra time to store sessions for logout
#idp.session.slop = 0
# Tolerate storage-related errors
#idp.session.maskStorageFailure = false
# Track information about SPs logged into
#idp.session.trackSPSessions = false
# Support lookup by SP for SAML logout
#idp.session.secondaryServiceIndex = false
# Length of time to track SP sessions
#idp.session.defaultSPlifetime = PT2H

# Select alternate implementation for step that determines what results are active
#idp.session.activeResultExtraction = net.shibboleth.idp.session.impl.ExtractActiveAuthenticationResults

# Regular expression matching login flows to enable 
#idp.authn.flows = IPAddress|JAAS
idp.authn.flows = IPAddress|LDAP

# Default lifetime and timeout of various authentication methods
#idp.authn.defaultLifetime = PT60M
#idp.authn.defaultTimeout = PT30M

# Whether to prioritize "active" results when an SP requests more than
# one possible matching login method (V2 behavior was to favor them)
#idp.authn.favorSSO = true

# Reload "failfast" (stop the IdP if a configuration is bad)
# and reload check interval (0 == never reload).
idp.service.logging.failFast=true
idp.service.logging.checkInterval=PT5M

# Relying Party resolver
#idp.service.relyingparty.failFast=false
idp.service.relyingparty.checkInterval=PT5M

# Metadata resolver
#idp.service.metadata.failFast=false
#idp.service.metadata.checkInterval=PT15M

# Attribute resolver
#idp.service.attribute.resolver.failFast=false
idp.service.attribute.resolver.checkInterval=PT5M

# Attribute filter
# Failing the filter fast leaves no filters enabled.
#idp.service.attribute.filter.failFast=false
idp.service.attribute.filter.checkInterval=PT5M

# NameID generation
#idp.service.nameidGeneration.failFast=false
idp.service.nameidGeneration.checkInterval=PT5M

# LDAP attribute configuration, see attribute-resolver.xml
idp.attribute.resolver.myLDAP.ldapURL             = ldap://localhost:10389
idp.attribute.resolver.myLDAP.baseDN              = ou=people,dc=example,dc=org 
idp.attribute.resolver.myLDAP.principal           = uid=myservice,ou=system
idp.attribute.resolver.myLDAP.principalCredential = myServicePassword

# Message freshness and replay cache tuning
#idp.policy.messageLifetime = PT3M
#idp.policy.clockSkew = PT3M

# Suppresses typical signing/encryption when artifact binding used
#idp.artifact.secureChannel = true

# May differ to direct SAML 2 artifact lookups to specific server nodes
#idp.artifact.endpointIndex = 1

# Access control for status page
idp.status.allowedAddresses = '127.0.0.1/32', '::1/128'
