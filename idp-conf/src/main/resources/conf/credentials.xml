<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <context:property-placeholder location="file:///${idp.home}/conf/idp.properties" />

    <!-- This BeanPostProcessor auto-sets identifiable beans with the bean name (if not already set). -->
    <bean class="net.shibboleth.ext.spring.config.IdentifiableBeanPostProcessor" />

    <!--
    This defines the signing and encryption key and certificate pairs referenced by your relying-party.xml
    configuration. You don't normally need to touch this, unless you have advanced requirements such as
    supporting multiple sets of keys for different rleying parties.
    
    Key rollover is generally only an issue for your encryption/decryption keypair, and we define two beans
    here that by default point to the same keypair. You can change your properties file to split off one
    of the keypairs if you need to support two at once while you wait for metadata to propagate.
    -->

    <!-- Your IdP's default signing key, set via property file. -->
    <bean id="defaultSigningCredential" class="org.opensaml.security.x509.BasicX509Credential"
            p:entityId-ref="entityID">
        <constructor-arg name="privateKey">
            <bean class="net.shibboleth.ext.spring.factory.PrivateKeyFactoryBean">
                <property name="privateKeyFile">
                    <bean class="java.io.File" c:_0="${idp.signing.key}" />
                </property>
            </bean>
        </constructor-arg>
        <constructor-arg name="entityCertificate">
            <bean class="net.shibboleth.ext.spring.factory.X509CertificateFactoryBean">
                <property name="certificateFile">
                    <bean class="java.io.File" c:_0="${idp.signing.cert}" />
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <!-- Your IdP's default encryption (really decryption) keys, set via property file. -->
    <util:list id="defaultEncryptionCredentials">
        <bean class="org.opensaml.security.x509.BasicX509Credential" p:entityId-ref="entityID">
            <constructor-arg name="privateKey">
                <bean class="net.shibboleth.ext.spring.factory.PrivateKeyFactoryBean">
                    <property name="privateKeyFile">
                        <bean class="java.io.File" c:_0="${idp.encryption.key}" />
                    </property>
                </bean>
            </constructor-arg>
            <constructor-arg name="entityCertificate">
                <bean class="net.shibboleth.ext.spring.factory.X509CertificateFactoryBean">
                    <property name="certificateFile">
                        <bean class="java.io.File" c:_0="${idp.encryption.cert}" />
                    </property>
                </bean>
            </constructor-arg>
        </bean>

        <bean class="org.opensaml.security.x509.BasicX509Credential" p:entityId-ref="entityID">
            <constructor-arg name="privateKey">
                <bean class="net.shibboleth.ext.spring.factory.PrivateKeyFactoryBean">
                    <property name="privateKeyFile">
                        <bean class="java.io.File" c:_0="${idp.encryption.key.2}" />
                    </property>
                </bean>
            </constructor-arg>
            <constructor-arg name="entityCertificate">
                <bean class="net.shibboleth.ext.spring.factory.X509CertificateFactoryBean">
                    <property name="certificateFile">
                        <bean class="java.io.File" c:_0="${idp.encryption.cert.2}" />
                    </property>
                </bean>
            </constructor-arg>
        </bean>
    </util:list>

    <bean id="defaultKeyEncryptionCredentialResolver" class="org.opensaml.xmlsec.keyinfo.impl.ChainingKeyInfoCredentialResolver">
        <constructor-arg>
            <util:list>
                <bean class="org.opensaml.xmlsec.keyinfo.impl.LocalKeyInfoCredentialResolver">
                    <constructor-arg name="localCredentialResolver">
                        <bean class="org.opensaml.xmlsec.keyinfo.impl.CollectionKeyInfoCredentialResolver"
                            c:credentials-ref="defaultEncryptionCredentials" />
                    </constructor-arg>
                    <constructor-arg name="keyInfoProviders">
                        <util:list>
                            <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.RSAKeyValueProvider" />
                            <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.DSAKeyValueProvider" />
                            <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.DEREncodedKeyValueProvider" />
                            <bean class="org.opensaml.xmlsec.keyinfo.impl.provider.InlineX509DataProvider" />
                        </util:list>
                    </constructor-arg>
                </bean>
                <bean class="org.opensaml.xmlsec.keyinfo.impl.StaticKeyInfoCredentialResolver"
                    c:credentials-ref="defaultEncryptionCredentials" />
            </util:list>
        </constructor-arg>
    </bean>

    <bean id="defaultEncryptedKeyResolver" class="org.opensaml.xmlsec.encryption.support.ChainingEncryptedKeyResolver"
            c:recipient-ref="entityID">
        <constructor-arg name="encKeyResolvers">
            <util:list>
                <bean class="org.opensaml.xmlsec.encryption.support.InlineEncryptedKeyResolver" />
                <bean class="org.opensaml.saml.saml2.encryption.EncryptedElementTypeEncryptedKeyResolver" />
                <bean class="org.opensaml.xmlsec.encryption.support.SimpleRetrievalMethodEncryptedKeyResolver" />
                <bean class="org.opensaml.xmlsec.encryption.support.SimpleKeyInfoReferenceEncryptedKeyResolver" />
            </util:list>
        </constructor-arg>
    </bean>
    
</beans>
