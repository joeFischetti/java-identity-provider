<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:c="http://www.springframework.org/schema/c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
                           
    <!-- Advanced configuration of services from SVN.
       
       To use an SVN resource you need to construct it and then inject it into 
       The appropriate bean. To use property replacement you will need a separate 
       resource pointing to the replacement phrase. 
        
       For example: 
        
    <bean id="AuthnMgr" class="org.tmatesoft.svn.core.auth.BasicAuthenticationManager">
        <constructor-arg>
            <null />
        </constructor-arg>
    </bean>
    <bean id="ClientMgr" factory-method="newInstance"
        class="org.tmatesoft.svn.core.wc.SVNClientManager"
        p:authenticationManager-ref="AuthnMgr" />
    <bean id="TheSVNURL" factory-method="create"
        class="org.tmatesoft.svn.core.SVNURL">
        <constructor-arg value="https" />
        <constructor-arg>
            <null />
        </constructor-arg>
        <constructor-arg value="svn.shibboleth.net" />
        <constructor-arg value="-1" />
        <constructor-arg
            value="/utilities/spring-extensions/trunk/src/test/resources/data/" />
        <constructor-arg value="false" />
    </bean>
    <bean id="TheSVNResource" class="net.shibboleth.ext.spring.resource.SVNResource">
        <constructor-arg ref="ClientMgr" />
        <constructor-arg ref="TheSVNURL" />
        <constructor-arg value="D:/testdir/dir" />
        <constructor-arg value="-1" />
        <constructor-arg value="TestResource.txt" />
    </bean>
    
    <util:list id="shibboleth.AttributeResolverResources">
       <ref bean="TheSVNResource"/>
       <value>path_to_properties_specifyingBean_file</value>
    </util:list>
    
     see also https://wiki.shibboleth.net/confluence/display/IDP30/SVNResource
              http://svnkit.com/javadoc/org/tmatesoft/svn/core/auth/BasicAuthenticationManager.html#constructor_detail 
              http://svnkit.com/javadoc/org/tmatesoft/svn/core/SVNURL.html
              
    -->
    
    <!--
    Otherwise by default we look at resources whose names are derived from %{idp.home}. Services not configured
    using native Spring syntax also need to load the property-placeholder file in order to pull settings from
    property sources.
    -->

    <util:list id="shibboleth.RelyingPartyResolverResources">
        <value>%{idp.home}/conf/relying-party.xml</value>
        <value>%{idp.home}/conf/credentials.xml</value>
        <value>%{idp.home}/system/conf/relying-party-system.xml</value>
    </util:list>

    <util:list id="shibboleth.MetadataResolverResources">
        <value>%{idp.home}/conf/metadata-providers.xml</value>
        <value>%{idp.home}/conf/property-placeholder.xml</value>
    </util:list>

    <!--
    This set of resources loads a legacy 2.x relying-party.xml file
    when idp.service.relyingparty.legacy=true
    -->
    <util:list id="shibboleth.LegacyRelyingPartyResolverResources">
        <value>%{idp.home}/conf/relying-party.xml</value>
        <value>%{idp.home}/conf/property-placeholder.xml</value>
        <value>%{idp.home}/system/conf/legacy-relying-party-defaults.xml</value>
    </util:list>

    <!--
    This allows a legacy relying-party.xml file to be used for metadata
    when idp.service.relyingparty.legacy=true
    -->
    <util:list id="shibboleth.LegacyMetadataResolverResources">
        <value>%{idp.home}/conf/metadata-providers.xml</value>
        <value>%{idp.home}/conf/property-placeholder.xml</value>
        <value>%{idp.home}/system/conf/legacy-relying-party-defaults.xml</value>
    </util:list>

    <util:list id ="shibboleth.AttributeResolverResources">
        <value>%{idp.home}/conf/attribute-resolver.xml</value>
        <value>%{idp.home}/conf/property-placeholder.xml</value>
    </util:list>

    <util:list id ="shibboleth.AttributeFilterResources">
        <value>%{idp.home}/conf/attribute-filter.xml</value>
        <value>%{idp.home}/conf/property-placeholder.xml</value>
    </util:list>

    <util:list id ="shibboleth.NameIdentifierGenerationResources">
        <value>%{idp.home}/conf/saml-nameid.xml</value>
        <value>%{idp.home}/system/conf/saml-nameid-system.xml</value>
    </util:list>
    
    <util:list id="shibboleth.AccessControlResources">
        <value>%{idp.home}/conf/access-control.xml</value>
        <value>%{idp.home}/system/conf/access-control-system.xml</value>
    </util:list>

    <!--
    This collection of resources differs slightly in that it should not include the file extension.
    Message sources are internationalized, and Spring will search for a compatible language extension
    and fall back to one with a .properties extension.
    -->
    <util:list id="shibboleth.MessageSourceResources">
        <value>%{idp.home}/conf/messages</value>
        <value>%{idp.home}/conf/post-authn/terms-of-use</value>
        <value>%{idp.home}/conf/post-authn/attribute-consent</value>
    </util:list>
    
</beans>
