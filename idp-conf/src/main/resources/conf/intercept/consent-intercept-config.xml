<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <!-- Terms of Use configuration -->
    
    <!--
    Terms of use is driven by a lookup function returning a key into messages/consent-message.properties
    
    The default mapping returns the relying party / SP name as the key. The second example below
    demonstrates use of a custom mapping table from the relying party name to the key to use. 
    -->
    
    <alias alias="shibboleth.consent.terms-of-use.Key" name="shibboleth.RelyingPartyIdLookup.Simple" />
    
    <!--
    <bean id="shibboleth.consent.terms-of-use.Key"
            class="com.google.common.base.Functions" factory-method="compose">
        <constructor-arg name="g">
            <bean class="com.google.common.base.Functions" factory-method="forMap" c:defaultValue="terms-of-use">
                <constructor-arg name="map">
                    <map>
                        <entry key="https://sp.example.org/shibboleth" value="example-terms" />
                    </map>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg name="f">
            <ref bean="shibboleth.RelyingPartyIdLookup.Simple" />
        </constructor-arg>
    </bean>
    -->

    <!-- Attribute Release configuration -->

    <!--
    Attribute release whitelist, blacklist, and match expressions to determine 
    whether consent should be obtained for an attribute based on the attribute ID.
    -->
    
    <util:list id="shibboleth.attribute-release.WhitelistedAttributeIDs">
        <!--
        <value>email</value>
        -->
    </util:list>

    <util:list id="shibboleth.attribute-release.BlacklistedAttributeIDs">
        <value>transientId</value>
        <value>persistentId</value>
        <value>eduPersonTargetedID</value>
    </util:list>

    <!-- 
    <bean id="shibboleth.attribute-release.MatchExpression" class="java.util.regex.Pattern" factory-method="compile" 
        c:regex="^exampleAttribute.*$" />
    -->

</beans>