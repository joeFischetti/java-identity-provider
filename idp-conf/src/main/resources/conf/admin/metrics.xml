<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:c="http://www.springframework.org/schema/c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

    default-init-method="initialize"
    default-destroy-method="destroy">
    
    <!-- Metrics enablement / activation. -->

    <!--
    Uncomment to register one or more of the built-in system metric sets available.
    Each bean can register only one metric set at a time (artifact of the metrics API).
    -->
    <!--
    <bean parent="shibboleth.metrics.RegisterMetricSet">
        <property name="arguments">
            <bean class="com.codahale.metrics.jvm.CachedThreadStatesGaugeSet"
                c:_0="1" c:_1="#{T(java.util.concurrent.TimeUnit).MINUTES}" />
        </property>
    </bean>
    <bean parent="shibboleth.metrics.RegisterMetricSet">
        <property name="arguments">
            <bean class="com.codahale.metrics.jvm.ClassLoadingGaugeSet" />
        </property>
    </bean>
    <bean parent="shibboleth.metrics.RegisterMetricSet">
        <property name="arguments">
            <bean class="com.codahale.metrics.jvm.GarbageCollectorMetricSet" />
        </property>
    </bean>
    <bean parent="shibboleth.metrics.RegisterMetricSet">
        <property name="arguments">
            <bean class="com.codahale.metrics.jvm.MemoryUsageGaugeSet" />
        </property>
    </bean>
    -->

    <!-- Metrics REST API Configuration -->

    <!--
    By default any requests are assumed to be for specific named metrics. You can
    create mappings here between a logical "group" name and an implementation of the
    com.codahale.metrics.MetricFilter interface to specify which metrics to include.
    -->
    <util:map id="shibboleth.metrics.MetricGroups">
    
    </util:map>
        
    <!-- If you don't specify an alternate access policy, this named policy will be enforced. -->
    <bean id="shibboleth.metrics.DefaultAccessPolicy" class="java.lang.String" c:_0="AccessByIPAddress" />
    
    <!--
    To override the default access policy, map a metric name or
    mapped group above to an alternative policy name.
    -->
    <util:map id="shibboleth.metrics.AccessPolicyMap">
    
    </util:map>
    
    <!-- System Timing Configuration -->
    
    <!--
    A bean named shibboleth.metrics.TimerStrategy of type Function<ProfileRequestContext,Boolean>
    can be defined to add timers to a large number of objects in the system. Each timer is defined
    by a triple (timer name, start object, stop object).
    
    The most common example is to start a timer when a particular flow action bean starts and
    stop it when the same or different action bean stops, to measure how long the execution takes.
    
    If you want to leave a timer in place but disabled to prevent overhead, you can turn off a
    logging category named "metrics.<timername>" in your logging configuration.
    -->
    
    <!--
    <bean id="shibboleth.metrics.TimerStrategy" parent="shibboleth.ContextFunctions.Scripted"
            factory-method="inlineScript">
        <constructor-arg>
            <value>
            <![CDATA[
                timerCtx = input.getSubcontext("net.shibboleth.idp.profile.context.TimerContext");
                timerCtx.addTimer("idp.attribute.resolution",
                    "net.shibboleth.idp.profile.impl.ResolveAttributes",
                    "net.shibboleth.idp.profile.impl.FilterAttributes"
                    );                                
                true; // Signals success.
            ]]>
            </value>
        </constructor-arg>
    </bean>
    -->
    
</beans>
