<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

       default-init-method="initialize"
       default-destroy-method="destroy">

    <import resource="../../conf/services.xml" />

    <!--
    These are beans that define reloadable services.
    Default resources are configured here but may be overridden in services.xml by deployers.
    -->

    <bean id="shibboleth.LoggingService" class="%{idp.service.logging.class:net.shibboleth.idp.log.LogbackLoggingService}"
        p:loggingConfiguration="%{idp.service.logging.resource:%{idp.home}/conf/logback.xml}"
        p:reloadCheckDelay="%{idp.service.logging.checkInterval:PT0S}"
        p:failFast="%{idp.service.logging.failFast:true}" />
    
    <bean id="shibboleth.AttributeFilterService" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
        depends-on="shibboleth.VelocityEngine"
        p:serviceConfigurations-ref="#{
            getObject('%{idp.service.attribute.filter.resources:shibboleth.AttributeFilterResources}') != null
                ? '%{idp.service.attribute.filter.resources:shibboleth.AttributeFilterResources}'
                : 'shibboleth.DefaultAttributeFilterResources' }"
        p:failFast="%{idp.service.attribute.filter.failFast:false}"
        p:reloadCheckDelay="%{idp.service.attribute.filter.checkInterval:PT0S}"
        p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer">
        <constructor-arg name="claz" value="net.shibboleth.idp.attribute.filter.AttributeFilter" />
        <constructor-arg name="strategy">
            <bean class="net.shibboleth.idp.attribute.filter.spring.AttributeFilterServiceStrategy"
                id="ShibbolethAttributeFilter"/>
        </constructor-arg>
    </bean>
    <util:list id ="shibboleth.DefaultAttributeFilterResources">
        <value>%{idp.home}/conf/attribute-filter.xml</value>
    </util:list>

    <bean id="shibboleth.AttributeResolverService" class="net.shibboleth.ext.spring.service.ReloadableSpringService" 
        depends-on="shibboleth.VelocityEngine"
        p:serviceConfigurations-ref="#{
            getObject('%{idp.service.attribute.resolver.resources:shibboleth.AttributeResolverResources}') != null
                ? '%{idp.service.attribute.resolver.resources:shibboleth.AttributeResolverResources}'
                : 'shibboleth.DefaultAttributeResolverResources' }"
        p:failFast="%{idp.service.attribute.resolver.failFast:false}"
        p:reloadCheckDelay="%{idp.service.attribute.resolver.checkInterval:PT0S}"
        p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer">
        <constructor-arg name="claz" value="net.shibboleth.idp.attribute.resolver.AttributeResolver" />
        <constructor-arg name="strategy">
            <bean class="net.shibboleth.idp.attribute.resolver.spring.AttributeResolverServiceStrategy"
                id="ShibbolethAttributeResolver"/>
        </constructor-arg>
    </bean>
    <util:list id ="shibboleth.DefaultAttributeResolverResources">
        <value>%{idp.home}/conf/attribute-resolver.xml</value>
    </util:list>

    <bean id="shibboleth.NameIdentifierGenerationService" class="net.shibboleth.ext.spring.service.ReloadableSpringService" 
        c:claz="net.shibboleth.idp.saml.nameid.NameIdentifierGenerationService"
        p:serviceConfigurations-ref="#{
            getObject('%{idp.service.nameidGeneration.resources:shibboleth.NameIdentifierGenerationResources}') != null
                ? '%{idp.service.nameidGeneration.resources:shibboleth.NameIdentifierGenerationResources}'
                : 'shibboleth.DefaultNameIdentifierGenerationResources' }"
        p:failFast="%{idp.service.nameidGeneration.failFast:false}"
        p:reloadCheckDelay="%{idp.service.nameidGeneration.checkInterval:PT0S}"
        p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
        p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer" />
    <util:list id ="shibboleth.DefaultNameIdentifierGenerationResources">
        <value>%{idp.home}/conf/saml-nameid.xml</value>
        <value>%{idp.home}/system/conf/saml-nameid-system.xml</value>
    </util:list>

    <bean id="shibboleth.RelyingPartyResolverService" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
        p:serviceConfigurations-ref="#{
            getObject('%{idp.service.relyingparty.resources:shibboleth.RelyingPartyResolverResources}') != null
                ? '%{idp.service.relyingparty.resources:shibboleth.RelyingPartyResolverResources}'
                : 'shibboleth.DefaultRelyingPartyResolverResources' }"
        p:failFast="%{idp.service.relyingparty.failFast:false}"
        p:reloadCheckDelay="%{idp.service.relyingparty.checkInterval:PT0S}"
        p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
        p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer">
        <constructor-arg name="claz" value="net.shibboleth.idp.relyingparty.RelyingPartyConfigurationResolver" />
        <constructor-arg name="strategy">
            <bean class="net.shibboleth.ext.spring.service.ClassBasedServiceStrategy"
                c:serviceableClaz="net.shibboleth.idp.relyingparty.impl.DefaultRelyingPartyConfigurationResolver" />
        </constructor-arg>
    </bean>
    <util:list id="shibboleth.DefaultRelyingPartyResolverResources">
        <value>%{idp.home}/conf/relying-party.xml</value>
        <value>%{idp.home}/conf/credentials.xml</value>
        <value>%{idp.home}/system/conf/relying-party-system.xml</value>
    </util:list>

    <bean id="shibboleth.MetadataResolverService" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
        depends-on="shibboleth.AttributeResolverService"
        p:serviceConfigurations-ref="#{
            getObject('%{idp.service.metadata.resources:shibboleth.MetadataResolverResources}') != null
                ? '%{idp.service.metadata.resources:shibboleth.MetadataResolverResources}'
                : 'shibboleth.DefaultMetadataResolverResources' }"
        p:failFast="%{idp.service.metadata.failFast:false}"
        p:reloadCheckDelay="%{idp.service.metadata.checkInterval:PT0S}"
        p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer">
        <constructor-arg name="claz" value="org.opensaml.saml.metadata.resolver.MetadataResolver" />
        <constructor-arg name="strategy">
            <bean class="net.shibboleth.idp.profile.spring.relyingparty.metadata.MetadataResolverServiceStrategy" />
        </constructor-arg>
        <property name="beanPostProcessors">
            <bean class="net.shibboleth.idp.profile.spring.relyingparty.metadata.NodeProcessingAttachingBeanPostProcessor"
                c:service-ref="shibboleth.AttributeResolverService" />
        </property>
    </bean>
    <util:list id="shibboleth.DefaultMetadataResolverResources">
        <value>%{idp.home}/conf/metadata-providers.xml</value>
        <value>%{idp.home}/system/conf/metadata-providers-system.xml</value>
    </util:list>

    <bean id="shibboleth.ReloadableAccessControlService" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
        c:claz="net.shibboleth.utilities.java.support.security.AccessControlService" 
        p:serviceConfigurations-ref="#{
            getObject('%{idp.service.access.resources:shibboleth.AccessControlResources}') != null
                ? '%{idp.service.access.resources:shibboleth.AccessControlResources}'
                : 'shibboleth.DefaultAccessControlResources' }"
        p:failFast="%{idp.service.access.failFast:true}"
        p:reloadCheckDelay="%{idp.service.access.checkInterval:PT0S}"
        p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
        p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer" />
    <util:list id="shibboleth.DefaultAccessControlResources">
        <value>%{idp.home}/conf/access-control.xml</value>
        <value>%{idp.home}/system/conf/access-control-system.xml</value>
    </util:list>

    <bean id="cas.ReloadableServiceRegistry" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
        c:claz="net.shibboleth.idp.cas.service.ServiceRegistry"
        p:serviceConfigurations-ref="#{
            getObject('%{idp.service.cas.registry.resources:cas.ServiceRegistryResources}') != null
                ? '%{idp.service.cas.registry.resources:cas.ServiceRegistryResources}'
                : 'cas.DefaultServiceRegistryResources' }"
        p:failFast="%{idp.service.cas.registry.failFast:true}"
        p:reloadCheckDelay="%{idp.service.cas.registry.checkInterval:PT0S}"
        p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
        p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer" />
    <util:list id="cas.DefaultServiceRegistryResources">
        <value>%{idp.home}/conf/cas-protocol.xml</value>
    </util:list>

    <!--
    These are proxies/facades that expose a service-unaware interface to client components.
    Services without such facades are being consumed directly in a service-aware way.
    -->
    
    <bean id="shibboleth.RelyingPartyConfigurationResolver"
        class="net.shibboleth.idp.relyingparty.impl.ReloadingRelyingPartyConfigurationResolver"
        c:resolverService-ref="shibboleth.RelyingPartyResolverService" />
        
    <bean id="shibboleth.MetadataResolver"
        class="net.shibboleth.idp.saml.metadata.impl.ReloadingRelyingPartyMetadataProvider"
        c:resolverService-ref="shibboleth.MetadataResolverService" />
        
    <bean id="shibboleth.RoleDescriptorResolver"
        class="org.opensaml.saml.metadata.resolver.impl.BasicRoleDescriptorResolver"
        c:mdResolver-ref="shibboleth.MetadataResolver" />   
        
    <bean id="shibboleth.AccessControlService"
        class="net.shibboleth.utilities.java.support.security.DelegatingAccessControlService"
        c:acService-ref="shibboleth.ReloadableAccessControlService" />

    <bean id="shibboleth.SAML1AttributeDesignatorsMapperService"
        class="net.shibboleth.idp.saml.attribute.mapping.impl.SAML1AttributeDesignatorsMapperService"
        c:resolverService-ref="shibboleth.AttributeResolverService" />

    <bean id="shibboleth.SAML2AttributesMapperService"
        class="net.shibboleth.idp.saml.attribute.mapping.impl.SAML2AttributesMapperService"
        c:resolverService-ref="shibboleth.AttributeResolverService" />

    <bean id="cas.ServiceRegistry"
          class="net.shibboleth.idp.cas.service.ReloadingServiceRegistry"
          c:delegate-ref="cas.ReloadableServiceRegistry" />

 </beans>
