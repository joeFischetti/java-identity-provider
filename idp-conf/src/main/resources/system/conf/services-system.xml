<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

       default-init-method="initialize"
       default-destroy-method="destroy">

    <context:property-placeholder location="file://${idp.home}/conf/idp.properties" />

    <!-- This BeanPostProcessor auto-sets identifiable beans with the bean name (if not already set). -->
    <bean class="net.shibboleth.ext.spring.config.IdentifiableBeanPostProcessor" />

    <!--
    These are beans that define reloadable services. The actual Spring resources that configure the
    services are generally defined in the services-user.xml file edited by deployers.
    -->

    <bean id="shibboleth.AttributeFilterService" class="net.shibboleth.idp.service.ReloadableSpringService"
        depends-on="shibboleth.VelocityEngine"
        c:claz="net.shibboleth.idp.attribute.filter.AttributeFilter"
        p:serviceConfigurations-ref="shibboleth.AttributeFilterResources"
        p:failFast="${idp.service.attribute.filter.failFast}"
        p:reloadCheckDelay="${idp.service.attribute.filter.checkInterval}"
        p:reloadTaskTimer="shibboleth.TaskTimer" />

    <bean id="shibboleth.AttributeResolverService" class="net.shibboleth.idp.service.ReloadableSpringService" 
          init-method="start" destroy-method="stop" depends-on="shibboleth.VelocityEngine"
        c:claz="net.shibboleth.idp.attribute.resolver.AttributeResolver"
        p:serviceConfigurations-ref="shibboleth.AttributeResolverResources"
        p:failFast="${idp.service.attribute.resolver.failFast}"
        p:reloadCheckDelay="${idp.service.attribute.resolver.checkInterval}"
        p:reloadTaskTimer="shibboleth.TaskTimer" />

    <bean id="shibboleth.NameIdentifierGenerationService" class="net.shibboleth.idp.service.ReloadableSpringService" 
          init-method="start" destroy-method="stop"
        c:claz="net.shibboleth.idp.saml.nameid.NameIdentifierGenerationService"
        p:serviceConfigurations-ref="shibboleth.NameIdentifierGenerationResources"
        p:reloadCheckDelay="${idp.service.nameidGeneration.checkInterval}"
        p:reloadTaskTimer="shibboleth.TaskTimer" />

    <bean id="shibboleth.RelyingPartyResolverService" class="net.shibboleth.idp.service.ReloadableSpringService"
        c:claz="net.shibboleth.idp.relyingparty.RelyingPartyConfigurationResolver"
        c:servicableClaz="net.shibboleth.idp.relyingparty.impl.DefaultRelyingPartyConfigurationResolver"
        p:serviceConfigurations-ref="shibboleth.RelyingPartyResolverResources"
        p:failFast="${idp.service.relyingparty.failFast}"
        p:reloadCheckDelay="${idp.service.relyingparty.checkInterval}"
        p:reloadTaskTimer="shibboleth.TaskTimer" />
    
    <bean id="shibboleth.MetadataResolverService" class="net.shibboleth.idp.service.ReloadableSpringService"
        c:claz="org.opensaml.saml.metadata.resolver.MetadataResolver"
        c:servicableClaz="net.shibboleth.idp.saml.metadata.impl.RelyingPartyMetadataProvider"
        p:serviceConfigurations-ref="shibboleth.MetadataResolverResources"
        p:failFast="${idp.service.metadata.failFast}"
        p:reloadCheckDelay="${idp.service.metadata.checkInterval}"
        p:reloadTaskTimer="shibboleth.TaskTimer" />
    
    <!--
    These are proxies/facades that expose a service-unaware interface to client components.
    Services without such facades are being consumed directly in a service-aware way.
    -->
    
    <bean id="shibboleth.RelyingPartyConfigurationResolver"
        class="net.shibboleth.idp.relyingparty.impl.ReloadingRelyingPartyConfigurationResolver"
        c:resolverService-ref="shibboleth.RelyingPartyResolverService" />
        
    <bean id="shibboleth.MetadataResolver"
        class="net.shibboleth.idp.saml.metadata.impl.ReloadingRelyingPartyMetadataProvider"
        c:resolverService-ref="shibboleth.MetadataResolverService" />

 </beans>
