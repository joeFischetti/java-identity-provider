<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <import resource="../../conf/intercept/profile-intercept.xml" />

    <!-- Parent bean for intercept interceptor flows. -->
    <bean id="shibboleth.InterceptFlow" abstract="true"
        class="net.shibboleth.idp.profile.interceptor.ProfileInterceptorFlowDescriptor" />

    <!-- Parent bean defining built-in interceptors used for SAML security policy handling. -->
    <bean id="shibboleth.DefaultInterceptFlows"
            class="org.springframework.beans.factory.config.ListFactoryBean" abstract="true">
        <property name="sourceList">
            <list>
                <bean id="intercept/security-policy/shibboleth-sso" parent="shibboleth.InterceptFlow" />
                <bean id="intercept/security-policy/saml2-sso" parent="shibboleth.InterceptFlow" />
                <bean id="intercept/security-policy/saml2-ecp" parent="shibboleth.InterceptFlow" />
                <bean id="intercept/security-policy/saml2-slo" parent="shibboleth.InterceptFlow" />
                <bean id="intercept/security-policy/saml-soap" parent="shibboleth.InterceptFlow" />
            </list>
        </property>
    </bean>

    <!-- Parent bean for attribute release consent flows. -->
    <bean id="shibboleth.consent.AttributeReleaseFlow" abstract="true"
        class="net.shibboleth.idp.consent.flow.ar.AttributeReleaseFlowDescriptor"
        p:storageService-ref="%{idp.consent.StorageService:shibboleth.ClientPersistentStorageService}"
        p:doNotRememberConsentAllowed="false"
        p:globalConsentAllowed="false"
        p:perAttributeConsentEnabled="false"
        p:compareValues="true"
        p:lifetime="P1Y"
        p:nonBrowserSupported="false"
        scope="prototype" />

    <!-- Parent bean for terms of use consent flows. -->
    <bean id="shibboleth.consent.TermsOfUseFlow" abstract="true"
        class="net.shibboleth.idp.consent.flow.ConsentFlowDescriptor"
        p:storageService-ref="%{idp.consent.StorageService:shibboleth.ClientPersistentStorageService}"
        p:compareValues="true"
        p:lifetime="P1Y"
        p:nonBrowserSupported="false"
        scope="prototype" />

    <!-- Function to lookup consent-specific audit context as a child of the consent context. -->
    <bean id="shibboleth.ChildLookup.ConsentAuditContext" class="com.google.common.base.Functions" factory-method="compose">
        <constructor-arg name="g">
            <bean id="shibboleth.ChildLookup.AuditContext" class="org.opensaml.messaging.context.navigate.ChildContextLookup"
                c:type="#{ T(net.shibboleth.idp.profile.context.AuditContext) }"
                c:createContext="true" />
        </constructor-arg>
        <constructor-arg name="f">
            <bean id="shibboleth.ChildLookup.ConsentContext" class="org.opensaml.messaging.context.navigate.ChildContextLookup"
                c:type="#{ T(net.shibboleth.idp.consent.context.ConsentContext) }" />
        </constructor-arg>
    </bean>

    <!-- Default consent audit extractors. -->
    <bean id="shibboleth.DefaultConsentAuditExtractors"
            class="org.springframework.beans.factory.config.MapFactoryBean" abstract="true">
        <property name="sourceMap">
            <map>
                <entry>
                    <key>
                        <util:constant static-field="net.shibboleth.idp.consent.audit.ConsentAuditFields.CURRENT_CONSENT_IDS" />
                    </key>
                    <bean class="net.shibboleth.idp.consent.audit.CurrentConsentIdsAuditExtractor" />
                </entry>
                <entry>
                    <key>
                        <util:constant static-field="net.shibboleth.idp.consent.audit.ConsentAuditFields.CURRENT_CONSENT_VALUES" />
                    </key>
                    <bean class="net.shibboleth.idp.consent.audit.CurrentConsentValuesAuditExtractor" />
                </entry>
                <entry>
                    <key>
                        <util:constant static-field="net.shibboleth.idp.consent.audit.ConsentAuditFields.CURRENT_CONSENT_IS_APPROVED" />
                    </key>
                    <bean class="net.shibboleth.idp.consent.audit.CurrentConsentIsApprovedAuditExtractor" />
                </entry>
                <entry>
                    <key>
                        <util:constant static-field="net.shibboleth.idp.profile.IdPAuditFields.USERNAME"/>
                    </key>
                    <bean class="com.google.common.base.Functions" factory-method="compose"
                        c:g-ref="shibboleth.PrincipalNameLookup.Subject"
                        c:f-ref="shibboleth.ChildLookup.SubjectContext" />
                </entry>
            </map>
        </property>
    </bean>

</beans>