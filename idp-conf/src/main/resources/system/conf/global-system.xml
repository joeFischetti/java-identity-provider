<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

       default-init-method="initialize"
       default-destroy-method="destroy">

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <!-- This bean MUST be called "conversionService" to work properly. -->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="net.shibboleth.ext.spring.config.DurationToLongConverter" />
                <bean class="net.shibboleth.ext.spring.config.StringToIPRangeConverter" />
                <bean class="net.shibboleth.ext.spring.config.BooleanToPredicateConverter" />
                <bean class="net.shibboleth.ext.spring.config.StringBooleanToPredicateConverter" />
                <bean class="net.shibboleth.ext.spring.config.StringToResourceConverter" />
            </list>
        </property>
    </bean>

    <!-- This BeanPostProcessor auto-sets identifiable beans with the bean name (if not already set). -->
    <bean class="net.shibboleth.ext.spring.config.IdentifiableBeanPostProcessor" />

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
            p:cacheSeconds="%{idp.errors.cacheSeconds:300}"
            p:basenames-ref="shibboleth.MessageSourceResources" />

    <import resource="../../conf/error-mappings.xml" />
    <import resource="general-authn-system.xml" />
    <import resource="session-manager-system.xml" />
    <import resource="services-system.xml" />
    <import resource="saml-binding-config.xml" />
    <import resource="subject-c14n-system.xml" />
    <import resource="utilities.xml" />
    
    <bean id="shibboleth.TaskTimer" class="java.util.Timer" destroy-method="cancel"/> <!--  only needed if you do reloading -->
    
    <bean id="shibboleth.LogbackLogging" class="net.shibboleth.idp.log.LogbackLoggingService"
          p:loggingConfiguration="%{idp.home}/conf/logback.xml"
          p:reloadCheckDelay="%{idp.service.logging.checkInterval:PT5M}"
          p:reloadTaskTimer-ref="shibboleth.TaskTimer"
          p:failFast="%{idp.service.logging.failFast:true}" />
    
    <bean id="shibboleth.OpenSAMLConfig" class="net.shibboleth.idp.spring.OpenSAMLConfigBean"
        depends-on="shibboleth.LogbackLogging,shibboleth.ParserPool" p:parserPool-ref="shibboleth.ParserPool" />

    <bean id="shibboleth.VelocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean" depends-on="shibboleth.LogbackLogging">
        <property name="overrideLogging" value="false"/>
        <property name="velocityProperties">
            <props>
                <prop key="runtime.log.logsystem.class">
                    net.shibboleth.utilities.java.support.velocity.SLF4JLogChute
                </prop>
                <prop key="input.encoding">UTF-8</prop>
                <prop key="output.encoding">UTF-8</prop>
                <prop key="resource.loader">file, classpath, string</prop>
                <prop key="classpath.resource.loader.class">
                    org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
                </prop>
                <prop key="string.resource.loader.class">
                    org.apache.velocity.runtime.resource.loader.StringResourceLoader
                </prop>
                <prop key="file.resource.loader.class">
                    org.apache.velocity.runtime.resource.loader.FileResourceLoader
                </prop>
                <prop key="file.resource.loader.path">%{idp.views:%{idp.home}/views}</prop>
                <prop key="file.resource.loader.cache">false</prop>
            </props>
        </property>
    </bean>

    <bean id="shibboleth.ParserPool" class="net.shibboleth.utilities.java.support.xml.BasicParserPool" depends-on="shibboleth.LogbackLogging"
            p:maxPoolSize="100"
            p:coalescing="true"
            p:ignoreComments="true"
            p:ignoreElementContentWhitespace="true"
            p:namespaceAware="true">
        <property name="builderAttributes">
            <map>
                <entry>
                    <key>
                        <value>http://apache.org/xml/properties/security-manager</value>
                    </key>
                    <bean id="shibboleth.XercesSecurityManager"
                        class="%{idp.xml.securityManager:com.sun.org.apache.xerces.internal.util.SecurityManager}" />
                </entry>
            </map>
        </property>
        <property name="builderFeatures">
            <map>
                <entry>
                    <key>
                        <value>http://apache.org/xml/features/disallow-doctype-decl</value>
                    </key>
                    <util:constant static-field="java.lang.Boolean.TRUE"/>
                </entry>
                <entry>
                    <key>
                        <value>http://apache.org/xml/features/validation/schema/normalized-value</value>
                    </key>
                    <util:constant static-field="java.lang.Boolean.FALSE"/>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="shibboleth.HttpServletRequest" class="net.shibboleth.utilities.java.support.net.ThreadLocalHttpServletRequestProxy" />
    <bean id="shibboleth.HttpServletResponse" class="net.shibboleth.utilities.java.support.net.ThreadLocalHttpServletResponseProxy" />
    
    <bean id="shibboleth.BuilderFactory" factory-method="getBuilderFactory" class="org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport" depends-on="shibboleth.OpenSAMLConfig" />
    <bean id="shibboleth.MarshallerFactory" factory-method="getMarshallerFactory" class="org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport" depends-on="shibboleth.OpenSAMLConfig" />
    <bean id="shibboleth.UnmarshallerFactory" factory-method="getUnmarshallerFactory" class="org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport" depends-on="shibboleth.OpenSAMLConfig" />

    <bean id="shibboleth.EndpointResolver" class="org.opensaml.saml.common.binding.impl.DefaultEndpointResolver" />

    <bean id="shibboleth.CookieManager" class="net.shibboleth.utilities.java.support.net.CookieManager"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"
        p:httpServletResponse-ref="shibboleth.HttpServletResponse"
        p:secure="false" />
    
    <bean id="shibboleth.DataSealer" class="net.shibboleth.utilities.java.support.security.DataSealer">
        <property name="keyStrategy">
            <bean class="net.shibboleth.utilities.java.support.security.BasicKeystoreKeyStrategy"
                p:keystoreType="%{idp.sealer.storeType:JCEKS}"
                p:keystoreResource="%{idp.sealer.storeResource}"
                p:keyVersionResource="%{idp.sealer.versionResource}"
                p:keystorePassword="%{idp.sealer.storePassword}"
                p:keyAlias="%{idp.sealer.aliasBase:secret}"
                p:keyPassword="%{idp.sealer.keyPassword}"
                p:updateInterval="%{idp.sealer.updateInterval:PT15M}"               
                p:updateTaskTimer-ref="shibboleth.TaskTimer" />
        </property>
    </bean>
    
    <bean id="shibboleth.StorageService"
        class="%{idp.storage.StorageService:org.opensaml.storage.impl.MemoryStorageService}"        
        p:cleanupInterval="%{idp.storage.cleanupInterval:PT10M}"
        p:cleanupTaskTimer-ref="shibboleth.TaskTimer" />

    <bean id="shibboleth.ClientStorageService"
        class="%{idp.storage.ClientStorageService:org.opensaml.storage.impl.ServletRequestScopedStorageService}"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"
        p:httpServletResponse-ref="shibboleth.HttpServletResponse"
        p:cookieManager-ref="shibboleth.CookieManager"
        p:dataSealer-ref="shibboleth.DataSealer" />
    
    <bean id="shibboleth.ReplayCache" class="org.opensaml.storage.ReplayCache" depends-on="shibboleth.LogbackLogging"
        p:storage-ref="shibboleth.StorageService" p:strict="true" />

    <bean id="shibboleth.SAMLArtifactMap" depends-on="shibboleth.StorageService"
        class="org.opensaml.saml.common.binding.artifact.impl.StorageServiceSAMLArtifactMap"
        p:storageService-ref="shibboleth.StorageService" />
    
    <bean id="shibboleth.DefaultIdentifierGenerationStrategy"
        class="net.shibboleth.utilities.java.support.security.SecureRandomIdentifierGenerationStrategy" />    
    
    <bean id="shibboleth.SignatureValidationParametersResolver"
        class="org.opensaml.xmlsec.impl.BasicSignatureValidationParametersResolver" />
    <bean id="shibboleth.SignatureSigningParametersResolver"
        class="org.opensaml.saml.security.impl.SAMLMetadataSignatureSigningParametersResolver" />
    <bean id="shibboleth.DecryptionParametersResolver"
        class="org.opensaml.xmlsec.impl.BasicDecryptionParametersResolver" />
    <bean id="shibboleth.EncryptionParametersResolver"
        class="org.opensaml.saml.security.impl.SAMLMetadataEncryptionParametersResolver"
        c:resolver-ref="shibboleth.MetadataCredentialResolver" />
    <bean id="shibboleth.ClientTLSValidationParametersResolver"
        class="org.opensaml.security.x509.tls.impl.BasicClientTLSValidationParametersResolver" />

    <!--
    The beans below are primarily used by trust engines in relying-party-system.xml, but also in the
    resolver for encryption parameters above.
    -->
    
    <bean id="shibboleth.MetadataCredentialResolver" class="org.opensaml.saml.security.impl.MetadataCredentialResolver"
         p:roleDescriptorResolver-ref="shibboleth.RoleDescriptorResolver"            
         p:keyInfoCredentialResolver-ref="shibboleth.KeyInfoCredentialResolver">
    </bean>
    
    <bean id="shibboleth.KeyInfoCredentialResolver" class="org.opensaml.xmlsec.config.DefaultSecurityConfigurationBootstrap"
        factory-method="buildBasicInlineKeyInfoCredentialResolver" />
        
 </beans>
