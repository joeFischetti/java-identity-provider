<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd"
       default-init-method="initialize">

    <!-- Action beans -->
    <bean id="InitializeProfileRequestContext"
          class="net.shibboleth.idp.profile.impl.InitializeProfileRequestContext"
          p:profileId="#{T(net.shibboleth.idp.cas.config.LoginConfiguration).PROFILE_ID}"
          p:loggingId="%{idp.service.logging.cas:SSO}"
          p:browserProfile="true" />

    <bean id="PopulateClientStorageLoadContext"
          class="org.opensaml.storage.impl.client.PopulateClientStorageLoadContext"
          scope="prototype"
          p:storageServices-ref="#{ getObject('shibboleth.ClientStorageServices') != null
            ? 'shibboleth.ClientStorageServices' : 'shibboleth.DefaultClientStorageServices' }" />

    <bean id="PopulateClientStorageSaveContext"
          class="org.opensaml.storage.impl.client.PopulateClientStorageSaveContext"
          scope="prototype"
          p:storageServices-ref="#{ getObject('shibboleth.ClientStorageServices') != null
            ? 'shibboleth.ClientStorageServices' : 'shibboleth.DefaultClientStorageServices' }" />

    <bean id="InitializeLogin"
          class="net.shibboleth.idp.cas.flow.InitializeLoginAction" />

    <bean id="CheckAuthenticationRequired"
          class="net.shibboleth.idp.cas.flow.CheckAuthenticationRequiredAction" />

    <bean id="BuildAuthenticationContext"
          class="net.shibboleth.idp.cas.flow.BuildAuthenticationContextAction" />

    <bean id="GrantServiceTicket"
          class="net.shibboleth.idp.cas.flow.GrantServiceTicketAction"
          c:ticketService-ref="cas.TicketService" />

    <bean id="PopulateSessionContext"
          class="net.shibboleth.idp.session.impl.PopulateSessionContext"
          scope="prototype"
          p:activationCondition="%{idp.session.enabled:true}"
          p:httpServletRequest-ref="shibboleth.HttpServletRequest"
          p:sessionResolver-ref="shibboleth.SessionManager" />

    <bean id="LoginConfigLookup"
          class="net.shibboleth.idp.cas.config.ConfigLookupFunction"
          c:clazz="net.shibboleth.idp.cas.config.LoginConfiguration" />

    <bean id="SubjectContextLookup"
          class="org.opensaml.messaging.context.navigate.ChildContextLookup"
          c:type="net.shibboleth.idp.authn.context.SubjectContext" />

    <bean id="ExtractAttributes"
          class="net.shibboleth.idp.cas.flow.ExtractAttributesAction" />

    <bean id="PopulatePostAuthnInterceptContext"
          class="net.shibboleth.idp.profile.interceptor.impl.PopulateProfileInterceptorContext" scope="prototype"
          p:availableFlows-ref="shibboleth.AvailableInterceptFlows">
        <property name="activeFlowsLookupStrategy">
            <bean class="net.shibboleth.idp.authn.config.navigate.PostAuthenticationFlowsLookupFunction" />
        </property>
    </bean>

    <bean id="PopulateAuditContext"
          class="net.shibboleth.idp.profile.audit.impl.PopulateAuditContext" scope="prototype"
          p:fieldExtractors-ref="#{
            getObject('shibboleth.CASLoginAuditExtractors') != null
                ? 'shibboleth.CASLoginAuditExtractors'
                : 'shibboleth.DefaultCASLoginAuditExtractors' }"
          p:formattingMap-ref="shibboleth.AuditFormattingMap" />

    <bean id="InitialAuthenticationFlag" class="java.lang.Boolean">
        <constructor-arg value="#{ '%{idp.authn.flows.initial:}'.trim().length() gt 0 }" type="boolean" />
    </bean>
</beans>