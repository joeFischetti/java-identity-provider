<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
          http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

    <action-state id="InitializeLogin">
        <on-entry>
            <evaluate result="flowScope.hasAuthenticationContext" expression="false" />
        </on-entry>
        <evaluate expression="InitializeProfileRequestContext"/>
        <evaluate expression="PopulateSessionContext"/>
        <evaluate expression="InitializeLogin" />
        <evaluate expression="BuildRelyingPartyContext" />
        <evaluate expression="BuildSAMLMetadataContext" />
        <evaluate expression="SelectRelyingPartyConfiguration" />
        <evaluate expression="SelectProfileConfiguration" />
        <evaluate expression="PublishProtocolRequest" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CheckAuthenticationRequired" />
        <transition on="ServiceNotSpecified" to="Error" />
    </action-state>

    <action-state id="CheckAuthenticationRequired">
        <evaluate expression="CheckAuthenticationRequired"/>
        <transition on="SessionNotFound" to="BuildAuthenticationContext" />
        <transition on="SessionFound" to="CheckResolveAttributes" />
        <transition on="RenewRequested" to="BuildAuthenticationContext" />
        <transition on="GatewayRequested" to="GatewayRedirect" />
    </action-state>

    <action-state id="BuildAuthenticationContext">
        <evaluate expression="BuildAuthenticationContext"/>
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="DoAuthenticationSubflow" />
    </action-state>

    <subflow-state id="DoAuthenticationSubflow" subflow="authn">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="CheckResolveAttributes">
            <evaluate result="flowScope.hasAuthenticationContext" expression="true" />
        </transition>
    </subflow-state>

    <decision-state id="CheckResolveAttributes">
        <if test="LoginConfigLookup.apply(opensamlProfileRequestContext).isResolveAttributes()"
            then="CheckForSubjectContext"
            else="GrantServiceTicket" />
    </decision-state>

    <decision-state id="CheckForSubjectContext">
        <if test="SubjectContextLookup.apply(opensamlProfileRequestContext) == null"
            then="PopulateSubjectContext"
            else="ResolveAttributes" />
    </decision-state>

    <action-state id="PopulateSubjectContext">
        <evaluate expression="PopulateSubjectContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="ResolveAttributes" />
    </action-state>

    <action-state id="ResolveAttributes">
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="FilterAttributes" />
        <evaluate expression="PopulatePostAuthnInterceptContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CheckPostAuthnInterceptContext" />
    </action-state>

    <decision-state id="CheckPostAuthnInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="GrantServiceTicket" else="DoPostAuthnInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoPostAuthnInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="GrantServiceTicket" />
    </subflow-state>

    <action-state id="GrantServiceTicket">
        <evaluate expression="GrantServiceTicket" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="RedirectToService" />
        <transition on="TicketCreationError" to="Error" />
    </action-state>

    <!-- Redirect end states -->
    <end-state id="RedirectToService" view="externalRedirect:#{requestScope.serviceTicketResponse.redirectUrl}">
        <on-entry>
            <evaluate expression="PublishProtocolResponse" />
        </on-entry>
    </end-state>

    <end-state id="GatewayRedirect" view="externalRedirect:#{requestScope.serviceTicketRequest.service}" />

    <!-- View end state -->
    <end-state id="Error" view="error">
        <on-entry>
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </end-state>

    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="Error">
            <evaluate expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.cas').error('Uncaught runtime exception', flowExecutionException.getCause())" />
        </transition>
        <transition on="#{currentEvent.id.startsWith('Invalid') or currentEvent.id.startsWith('Unable')}"
                    to="Error" />
        <transition on="IllegalState" to="Error" />
        <transition on="ProtocolViolation" to="Error" />
    </global-transitions>

    <bean-import resource="login-beans.xml" />

</flow>