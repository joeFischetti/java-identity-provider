<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      parent="authn.abstract">

    <!-- This is a login flow for oroxied authentication implemented via protocol-specific subflows. -->

    <on-start>
        <set name="flowScope.protocolIterator" value="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.authn.Proxy.precedence').iterator()" />
        <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.authn.Proxy.discoveryFunction') ? opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext)).setAuthenticatingAuthority(flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.authn.Proxy.discoveryFunction').apply(opensamlProfileRequestContext)) : null" />
    </on-start>

    <decision-state id="CheckDiscoveryDone">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext)).getAuthenticatingAuthority() == null"
            then="DoDiscovery"
            else="SelectProxyFlow" />
    </decision-state>

    <view-state id="DoDiscovery" view="externalRedirect:#{DiscoveryProfileRequestFunction.apply(new net.shibboleth.utilities.java.support.collection.Pair(flowRequestContext, opensamlProfileRequestContext))}">
        <attribute name="csrf_excluded" value="true" type="boolean"/>
        <transition on="proceed" to="ExtractDiscoveryResponse" />
    </view-state>
    
    <action-state id="ExtractDiscoveryResponse">
        <evaluate expression="ExtractDiscoveryResponse" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="SelectProxyFlow" />
        <transition to="ReselectFlow" />
    </action-state>
    
    <decision-state id="SelectProxyFlow">
        <if test="protocolIterator.hasNext()" then="CallProxyFlow" else="ReselectFlow" />
    </decision-state>
    
    <subflow-state id="CallProxyFlow" subflow="authn/#{protocolIterator.next()}">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="proceed" />
        <transition on="ReselectFlow" to="SelectProxyFlow" />
    </subflow-state>

    <bean-import resource="proxy-authn-beans.xml" />
</flow>
