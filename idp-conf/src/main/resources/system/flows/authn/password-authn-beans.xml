<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">
       
    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <bean class="net.shibboleth.ext.spring.config.IdentifiableBeanPostProcessor" />
    <bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />



    <import resource="../../../conf/authn/password-authn-config.xml" />

    <bean id="ExtractUsernamePasswordFromBasicAuth"
        class="net.shibboleth.idp.authn.impl.ExtractUsernamePasswordFromBasicAuth" scope="prototype"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"
        p:lowercase-ref="shibboleth.authn.Password.Lowercase"
        p:uppercase-ref="shibboleth.authn.Password.Uppercase"
        p:trim-ref="shibboleth.authn.Password.Trim"
        p:transforms-ref="shibboleth.authn.Password.Transforms" />

    <bean id="PreserveAuthenticationFlowState"
        class="net.shibboleth.idp.authn.impl.PreserveAuthenticationFlowState" scope="prototype"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"
        p:parameterNames="#{getObject('shibboleth.authn.Password.ExtendedFlowParameters')}" />
    
    <bean id="ExtractUsernamePasswordFromFormRequest"
        class="net.shibboleth.idp.authn.impl.ExtractUsernamePasswordFromFormRequest" scope="prototype"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"
        p:usernameFieldName-ref="shibboleth.authn.Password.UsernameFieldName"
        p:passwordFieldName-ref="shibboleth.authn.Password.PasswordFieldName"
        p:SSOBypassFieldName-ref="shibboleth.authn.Password.SSOBypassFieldName"
        p:lowercase-ref="shibboleth.authn.Password.Lowercase"
        p:uppercase-ref="shibboleth.authn.Password.Uppercase"
        p:trim-ref="shibboleth.authn.Password.Trim"
        p:transforms-ref="shibboleth.authn.Password.Transforms" />
        
    <bean id="PopulateSubjectCanonicalizationContext"
        class="net.shibboleth.idp.authn.impl.PopulateSubjectCanonicalizationContext" scope="prototype"
        p:availableFlows-ref="shibboleth.PostLoginSubjectCanonicalizationFlows" />
    
    <!-- New action bean that uses CredentialValidator chains. -->    
    <bean id="ValidateCredentials"
        class="net.shibboleth.idp.authn.impl.ValidateCredentials" scope="prototype"
        p:requireAll="#{getObject('shibboleth.authn.Password.RequireAll') ?: false}"
        p:validators="#{getObject('shibboleth.authn.Password.Validators') ?: getObject('ValidateUsernamePassword')}"
        p:addDefaultPrincipals="#{getObject('shibboleth.authn.Password.addDefaultPrincipals') ?:
            (getObject('shibboleth.authn.Password.PrincipalOverride') == null
                or getObject('shibboleth.authn.Password.PrincipalOverride').isEmpty())}"
        p:supportedPrincipals="#{getObject('shibboleth.authn.Password.PrincipalOverride')}"
        p:classifiedMessages-ref="shibboleth.authn.Password.ClassifiedMessageMap"
        p:resultCachingPredicate="#{getObject('shibboleth.authn.Password.resultCachingPredicate')}"
        p:lockoutManager="#{getObject('shibboleth.authn.Password.AccountLockoutManager')}" />
    
    <!-- New parent bean for defining validators. -->
    
    <bean id="shibboleth.CredentialValidator" abstract="true"
        p:savePasswordToCredentialSet="#{getObject('shibboleth.authn.Password.RetainAsPrivateCredential') ?: false}"
        p:removeContextAfterValidation="#{getObject('shibboleth.authn.Password.RemoveAfterValidation') ?: true}"
        p:matchExpression="#{getObject('shibboleth.authn.Password.matchExpression')}" />

    <!-- New validator(s) that didn't exist in prior versions. -->
    <bean id="shibboleth.HTPasswdCredentialValidator" parent="shibboleth.CredentialValidator" abstract="true"
        class="net.shibboleth.idp.authn.impl.HTPasswdCredentialValidator"
        p:id="htpasswd" />

    <!-- Alias the legacy names into "officially" supported parent bean names. -->

    <alias alias="shibboleth.JAASValidator" name="ValidateUsernamePasswordAgainstJAAS" />
    <alias alias="shibboleth.KerberosValidator" name="ValidateUsernamePasswordAgainstKerberos" />
    <alias alias="shibboleth.LDAPValidator" name="ValidateUsernamePasswordAgainstLDAP" />

    <!-- Legacy validators defined under V3 action bean names. -->
    
    <bean id="ValidateUsernamePasswordAgainstJAAS" parent="shibboleth.CredentialValidator" lazy-init="true"
            class="net.shibboleth.idp.authn.impl.JAASCredentialValidator"
            p:id="jaas"
            p:loginConfigStrategy="#{getObject('shibboleth.authn.JAAS.LoginConfigStrategy')}"
            p:loginConfigNames="#{getObject('shibboleth.authn.JAAS.LoginConfigNames')}"
            p:loginConfigurations="#{getObject('shibboleth.authn.JAAS.LoginConfigurations')}"
            p:loginConfigType="JavaLoginConfig">
        <property name="loginConfigParameters">
            <bean class="java.security.URIParameter">
                <constructor-arg ref="shibboleth.authn.JAAS.JAASConfigURI" />
            </bean>
        </property>
    </bean>

    <bean id="ValidateUsernamePasswordAgainstKerberos" parent="shibboleth.CredentialValidator" lazy-init="true"
        class="net.shibboleth.idp.authn.impl.KerberosCredentialValidator"
        p:id="krb5"
        p:refreshKrb5Config-ref="shibboleth.authn.Krb5.RefreshConfig"
        p:preserveTicket-ref="shibboleth.authn.Krb5.PreserveTicket"
        p:servicePrincipal="#{getObject('shibboleth.authn.Krb5.ServicePrincipal')}"
        p:keytabPath="#{getObject('shibboleth.authn.Krb5.Keytab')}" />

    <bean id="ValidateUsernamePasswordAgainstLDAP" parent="shibboleth.CredentialValidator" lazy-init="true"
        class="net.shibboleth.idp.authn.impl.LDAPCredentialValidator"
        p:id="ldap"
        p:authenticator-ref="shibboleth.authn.LDAP.authenticator"
        p:returnAttributes-ref="shibboleth.authn.LDAP.returnAttributes" />

    <!-- Parent beans for custom ldaptive CredentialConfig types. -->
    
    <bean id="shibboleth.X509ResourceCredentialConfig"
        class="net.shibboleth.idp.authn.impl.X509ResourceCredentialConfig" abstract="true" /> 
    <bean id="shibboleth.KeystoreResourceCredentialConfig"
        class="net.shibboleth.idp.authn.impl.KeystoreResourceCredentialConfig" abstract="true" /> 

</beans>
