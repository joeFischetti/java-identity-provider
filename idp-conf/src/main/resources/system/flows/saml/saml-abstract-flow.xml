<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
    abstract="true">

    <!--  Actions common to most SAML profile flows. -->

    <!-- Decode / Configuration Lookup / Request Checking -->

    <action-state id="DecodeMessage">
        <evaluate expression="DecodeMessage" />

        <evaluate expression="CheckMessageVersion" />
        <evaluate expression="SAML1ArtifactRequestIssuer" />
        <evaluate expression="SAMLProtocolAndRole" />
        <evaluate expression="SAMLMetadataLookup" />

        <evaluate expression="InitializeRelyingPartyContexFromSAMLPeer" />
        <evaluate expression="SelectRelyingPartyConfiguration" />
        <evaluate expression="SelectProfileConfiguration" />

        <evaluate expression="PopulateSignatureValidationParameters" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckForInboundSubflow" />
    </action-state>
    
    <action-state id="CheckForInboundSubflow">
        <evaluate expression="CheckForInboundSubflow" />
        <evaluate expression="'proceed'" />
        
        <!-- No inbound flow to call. -->
        <transition on="proceed" to="OutboundContexts" />
        
        <!-- Anything else is a subflow to call. -->
        <transition to="CallInboundSubflow" />
    </action-state>
    
    <subflow-state id="CallInboundSubflow" subflow="#{currentEvent.id}">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="OutboundContextsAndSecurityParameters" />
    </subflow-state>

    <action-state id="OutboundContextsAndSecurityParameters">
        <evaluate expression="InitializeOutboundMessageContext" />
        <evaluate expression="InitializeMessageChannelSecurityContext" />
        <evaluate expression="PopulateBindingAndEndpointContexts" />
        <evaluate expression="PopulateResponseSignatureSigningParameters" />
        <evaluate expression="PopulateAssertionSignatureSigningParameters" />
        <evaluate expression="PopulateEncryptionParameters" />
        <evaluate expression="PopulateDecryptionParameters" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ExtractSubject" />
    </action-state>

    <!-- Pull SAML Subject if present and turn it into a principal name. -->

    <action-state id="ExtractSubject">
        <evaluate expression="DecryptNameIDs" />
        <evaluate expression="ExtractSubjectFromRequest" />
        <evaluate expression="'proceed'" />
        
        <!-- No subject to operate on, so just skip to the profile. -->
        <transition on="NoSubject" to="DoProfileWork" />
        
        <transition on="proceed" to="CallSubjectCanonicalization" />
    </action-state>

    <subflow-state id="CallSubjectCanonicalization" subflow="c14n/saml">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="FinalizeSAMLSubjectCanonicalization" />
    </subflow-state>
    
    <action-state id="FinalizeSAMLSubjectCanonicalization">
        <evaluate expression="FinalizeSAMLSubjectCanonicalization" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DoProfileWork" />
    </action-state>
    
    <!--
    The meat will be inserted here by defining DoProfileWork and transitioning from
    there to profile activity and eventually to the final stages below.
    -->

    <!-- Post Processing / Encode -->

    <!--
    These actions handle errors by routing to the catch-all end-state, because it's assumed that
    any error here is unrecoverable and would prevent returning a SAML protocol message regardless.
    -->

    <action-state id="ReturnToParentFlow">
        <evaluate expression="CheckForOutboundSubflow" />
        
        <evaluate expression="'proceed'" />

        <!-- proceed indicates no flow to call -->
        <transition on="proceed" to="HandleOutboundMessage" />
        
        <!-- Call a subflow with the same ID as the event. -->
        <transition to="CallOutboundSubflow" />
    </action-state>
    
    <subflow-state id="CallOutboundSubflow" subflow="#{currentEvent.id}">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="HandleOutboundMessage" />
        <transition to="error" />
    </subflow-state>

    <action-state id="HandleOutboundMessage">
        <evaluate expression="HandleOutboundMessage" />
        <evaluate expression="EncodeMessage" />
        <evaluate expression="RecordResponseComplete" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="end" />
        <transition to="error" />
    </action-state>

    <!-- Terminus -->

    <end-state id="end" />

    <!-- Handle errors by transitioning to an action defined below us.  -->

    <end-state id="error" view="error">
        <on-entry>
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
        </on-entry>
    </end-state>

    <!-- Default is to turn non-proceed events into an error, preserve it, and initiate error handling sequence. -->
    <global-transitions>
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="HandleError" />
    </global-transitions>

    <!-- The import references the parent folder because the abstract flow is used only from one level down. -->
    <bean-import resource="../saml-abstract-beans.xml" />

</flow>
