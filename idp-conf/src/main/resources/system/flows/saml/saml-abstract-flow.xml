<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
    abstract="true">

    <!--  Actions common to most SAML profile flows. -->

    <!-- Preamble / Decode / Configuration Lookup -->

    <action-state id="DecodeMessage">
        <evaluate expression="DecodeMessage" />
        <transition on="proceed" to="CheckMessageVersion" />
    </action-state>

    <action-state id="CheckMessageVersion">
        <evaluate expression="CheckMessageVersion" />
        <transition on="proceed" to="SAMLProtocolAndRole" />
    </action-state>

    <action-state id="SAMLProtocolAndRole">
        <evaluate expression="SAMLProtocolAndRole" />
        <transition on="proceed" to="SAMLMetadataLookup" />
    </action-state>

    <action-state id="SAMLMetadataLookup">
        <evaluate expression="SAMLMetadataLookup" />
        <transition on="proceed" to="InitializeRelyingPartyContexFromSAMLPeer" />
    </action-state>

    <action-state id="InitializeRelyingPartyContexFromSAMLPeer">
        <evaluate expression="InitializeRelyingPartyContexFromSAMLPeer" />
        <transition on="proceed" to="SelectRelyingPartyConfiguration" />
    </action-state>

    <action-state id="SelectRelyingPartyConfiguration">
        <evaluate expression="SelectRelyingPartyConfiguration" />
        <transition on="proceed" to="SelectProfileConfiguration" />
    </action-state>

    <action-state id="SelectProfileConfiguration">
        <evaluate expression="SelectProfileConfiguration" />
        <transition on="proceed" to="PopulateSignatureValidationParameters" />
    </action-state>

    <action-state id="PopulateSignatureValidationParameters">
        <evaluate expression="PopulateSignatureValidationParameters" />
        <transition on="proceed" to="HandleInboundSecurityPolicy" />
    </action-state>
    
    <action-state id="HandleInboundSecurityPolicy">
        <evaluate expression="HandleInboundSecurityPolicy" />
        <transition on="proceed" to="InitializeOutboundMessageContext" />
    </action-state>

    <!-- Request Checking and Preliminaries -->

    <action-state id="InitializeOutboundMessageContext">
        <evaluate expression="InitializeOutboundMessageContext" />
        <transition on="proceed" to="PopulateBindingAndEndpointContexts" />
    </action-state>
    
    <action-state id="PopulateBindingAndEndpointContexts">
        <evaluate expression="PopulateBindingAndEndpointContexts" />
        <transition on="proceed" to="PopulateDecryptionParameters" />
    </action-state>

    <!-- Pull SAML Subject if present and turn it into a principal name. -->

    <action-state id="PopulateDecryptionParameters">
        <evaluate expression="PopulateDecryptionParameters" />
        <transition on="proceed" to="DecryptNameIDs" />
    </action-state>
    
    <action-state id="DecryptNameIDs">
        <evaluate expression="DecryptNameIDs" />
        <transition on="proceed" to="ExtractSubjectFromRequest" />
    </action-state>

    <action-state id="ExtractSubjectFromRequest">
        <evaluate expression="ExtractSubjectFromRequest" />
        
        <!-- No subject to operate on, so just skip back to the profile. -->
        <transition on="NoSubject" to="PopulateResponseSignatureSigningParameters" />
        
        <transition on="proceed" to="CallSubjectCanonicalization" />
    </action-state>

    <subflow-state id="CallSubjectCanonicalization" subflow="SubjectC14N/SAML">
        <transition on="proceed" to="FinalizeSAMLSubjectCanonicalization" />
    </subflow-state>
    
    <action-state id="FinalizeSAMLSubjectCanonicalization">
        <evaluate expression="FinalizeSAMLSubjectCanonicalization" />
        <transition on="proceed" to="PopulateResponseSignatureSigningParameters" />
    </action-state>

    <action-state id="PopulateResponseSignatureSigningParameters">
        <evaluate expression="PopulateResponseSignatureSigningParameters" />
        <transition on="proceed" to="PopulateAssertionSignatureSigningParameters" />
    </action-state>
    
    <action-state id="PopulateAssertionSignatureSigningParameters">
        <evaluate expression="PopulateAssertionSignatureSigningParameters" />
        <transition on="proceed" to="PopulateEncryptionParameters" />
    </action-state>

    <action-state id="PopulateEncryptionParameters">
        <evaluate expression="PopulateEncryptionParameters" />
        <transition on="proceed" to="DoProfileWork" />
        <!-- TODO: remove once encryption stuff is tested/working -->
        <transition on="InvalidSecurityConfiguration" to="DoProfileWork" />
    </action-state>
    
    <!--
    The meat will be inserted here by defining DoProfileWork and transitioning from
    there to profile activity and eventually to the final stages below.
    -->

    <!-- Post Processing / Encode -->

    <!--
    These actions handle errors by routing to the catch-all end-state, because it's assumed that
    any error here is unrecoverable and would prevent returning a SAML protocol message regardless.
    -->

    <action-state id="HandleOutboundMessage">
        <evaluate expression="HandleOutboundMessage" />
        <transition on="proceed" to="EncodeMessage" />
        <transition on="#{true}" to="error" />
    </action-state>

    <action-state id="EncodeMessage">
        <evaluate expression="EncodeMessage" />
        <transition on="proceed" to="RecordResponseComplete" />
        <transition on="#{true}" to="error" />
    </action-state>

    <action-state id="RecordResponseComplete">
        <evaluate expression="RecordResponseComplete" />
        <transition on="proceed" to="end" />
        <transition on="#{true}" to="error" />
    </action-state>

    <!-- Terminus -->

    <end-state id="end">
        <!-- TODO: Probably remove later. For tests, map the profile request context as an output attribute -->
        <output name="ProfileRequestContext"
            value="flowRequestContext.getConversationScope().get('org.opensaml.profile.context.ProfileRequestContext')" />
    </end-state>

    <!-- Handle errors by preserving state and transitioning to an action defined below us.  -->

    <action-state id="SavePreviousEventAsError">
        <evaluate expression="SavePreviousEventAsError" />
        <transition on="proceed" to="HandleError" />
    </action-state>

    <end-state id="error" view="error">
        <on-entry>
            <evaluate expression="flowRequestContext.getConversationScope().get('org.opensaml.profile.context.ProfileRequestContext')" result="requestScope.profileRequestContext" />
            <evaluate expression="profileRequestContext.getSubcontext(T(org.opensaml.profile.context.ErrorEventContext))" result="requestScope.errorEventContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.encoder.HTMLEncoder)" result="requestScope.encoder" />
        </on-entry>
    </end-state>

    <!-- Default is to turn any event into an error, preserve it, and initiate error handling sequence. -->
    <global-transitions>
        <transition on="#{true}" to="SavePreviousEventAsError" />
    </global-transitions>

    <!-- The import references the parent folder because the abstract flow is used only from one level down. -->
    <bean-import resource="../saml-abstract-beans.xml" />

</flow>
