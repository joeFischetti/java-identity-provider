<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
    abstract="true" parent="saml.abstract">

    <!-- https://wiki.shibboleth.net/confluence/display/IDP30/SAML+1.1+Browser+SSO -->

    <!-- Bootstrap action has to be at the "top" of the flow after this flow prepends itself to parent. -->
    
    <action-state id="InitializeProfileRequestContext">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DecodeMessage" />
    </action-state>

    <!-- This picks up from the parent flow with the transition or error step. -->
        
    <decision-state id="DoProfileWork">
        <if test="InitialAuthenticationFlag" then="PreInitialSetup" else="PostInitialSetup" />
    </decision-state>

    <action-state id="PreInitialSetup">
        <evaluate expression="InitializeAuthenticationContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DoInitialAuthenticationSubflow" />
    </action-state>

    <subflow-state id="DoInitialAuthenticationSubflow" subflow="authn-initial">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="PostInitialSetup" />
    </subflow-state>
    
    <action-state id="PostInitialSetup">
        <evaluate expression="InitializeAuthenticationContext" />
        <evaluate expression="InitializeRequestedPrincipalContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DoAuthenticationSubflow" />
    </action-state>

    <subflow-state id="DoAuthenticationSubflow" subflow="authn">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="ResolveAttributes" />
    </subflow-state>
    
    <decision-state id="ResolveAttributes">
        <if test="ResolveAttributesPredicate.apply(opensamlProfileRequestContext)"
            then="AttributeResolution"
            else="BuildResponse" />
    </decision-state>
    
    <action-state id="AttributeResolution">
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="FilterAttributes" />
        <evaluate expression="PopulatePostAuthnInterceptContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckPostAuthnInterceptContext" />
    </action-state>

    <decision-state id="CheckPostAuthnInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="BuildResponse" else="DoPostAuthnInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoPostAuthnInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="BuildResponse" />
    </subflow-state>

    <action-state id="BuildResponse">
        <evaluate expression="AddResponseShell" />
        <evaluate expression="AddInResponseToToResponse" />

        <evaluate expression="AddAuthenticationStatementToAssertion" />
        <evaluate expression="AddAttributeStatementToAssertion" />
        <evaluate expression="AddNameIdentifierToSubjects" />
        <evaluate expression="AddSubjectConfirmationToSubjects" />
        <evaluate expression="AddNotBeforeConditionToAssertions" />
        <evaluate expression="AddNotOnOrAfterConditionToAssertions" />
        <evaluate expression="AddAudienceRestrictionToAssertions" />
        <evaluate expression="SignAssertions" />

        <evaluate expression="PostAssertionPopulateAuditContext" />
        <evaluate expression="PostResponsePopulateAuditContext" />

        <evaluate expression="UpdateSessionWithSPSession" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ReturnToParentFlow" />
        <!-- Mask storage failure. -->
        <transition on="InputOutputError" to="ReturnToParentFlow" />
    </action-state>

    <!-- Outbound message handling completes in the parent flow. -->

    <!-- Error Response Generation -->

    <decision-state id="HandleError">
        <on-entry>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.SpringRequestContext), true).setRequestContext(flowRequestContext)" />
        </on-entry>
        <if test="LocalErrorPredicate.apply(opensamlProfileRequestContext)"
            then="HandleErrorWithView" else="HandleErrorWithResponse" />
    </decision-state>

    <!-- We need to trap non-proceed transitions in these actions to avoid an infinite loop. -->

    <action-state id="HandleErrorWithResponse">
        <evaluate expression="AddResponseShell" />
        <evaluate expression="AddInResponseToToResponse" />
        <evaluate expression="AddStatusToResponse" />
        <evaluate expression="PostResponsePopulateAuditContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ReturnToParentFlow" />
        <transition to="HandleErrorWithView" />
        
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </action-state>

    <bean-import resource="sso-abstract-beans.xml" />

</flow>
