<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      abstract="true" parent="post-authn.abstract">

    <!-- Rudimentary impediment to direct execution of subflow. -->
    <input name="calledAsSubflow" type="boolean" required="true" />


    <!-- Attribute consent setup. -->
    
    <on-start>
        <evaluate expression="AttributeConsentFlowDescriptorLookupStrategy.apply(opensamlProfileRequestContext)" result="flowScope.attributeReleaseFlowDescriptor" />
    </on-start>

    <action-state id="AttributeConsentSetup">
        <evaluate expression="InitializeConsentContext" />
        <evaluate expression="InitializeAttributeConsentContext" />
        <evaluate expression="PopulateAttributeConsentContext" />
        <evaluate expression="SetRPUIInformation" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="TestForRevokeConsent" />
    </action-state>


    <!-- If consent revocation was requested, skip reading from storage. -->

    <decision-state id="TestForRevokeConsent">
        <if test="requestParameters._idp_revokeConsent" then="IsAttributeConsentRequired" else="ReadConsentFromStorage" />
    </decision-state>


    <!-- Read consent from storage. -->

    <action-state id="ReadConsentFromStorage">
        <evaluate expression="ReadConsentFromStorage" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="TestForReadGlobalAttributeConsentFromStorage" />
    </action-state>

    <decision-state id="TestForReadGlobalAttributeConsentFromStorage">
        <if test="attributeReleaseFlowDescriptor.globalConsentAllowed" then="ReadGlobalAttributeConsentFromStorage" else="IsAttributeConsentRequired" />
    </decision-state>

    <action-state id="ReadGlobalAttributeConsentFromStorage">
        <evaluate expression="ReadGlobalAttributeConsentFromStorage" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="TestForGlobalAttributeConsent" />
    </action-state>


    <!-- If global consent has been given by user, skip the rest of the flow. -->
    
    <decision-state id="TestForGlobalAttributeConsent">
        <if test="GlobalAttributeConsentPredicate.apply(opensamlProfileRequestContext)" then="proceed" else="IsAttributeConsentRequired" />
    </decision-state>


    <!-- Determine whether to prompt user for consent. -->
    
    <action-state id="IsAttributeConsentRequired">
        <evaluate expression="IsAttributeConsentRequired" />
        <evaluate expression="'proceed'" />
        <transition on="ConsentNotRequired" to="ReleaseAttributes" />
        <transition on="proceed" to="CreateAttributeConsentChoices" />
    </action-state>
    
    
    <!-- Create consent objects and store in consent context. -->

    <action-state id="CreateAttributeConsentChoices">
        <evaluate expression="CreateAttributeConsentChoices" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="DisplayAttributeReleasePage" />
    </action-state>
    
    
    <!-- Display consent page. -->

    <view-state id="DisplayAttributeReleasePage" view="#{flowRequestContext.activeFlow.id}">
        <on-render>
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="new net.shibboleth.idp.consent.logic.AttributeDisplayNameFunction(flowRequestContext.getExternalContext().getLocale())" result="requestScope.attributeDisplayNameFunction" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.consent.context.ConsentContext))" result="viewScope.consentContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.consent.context.AttributeReleaseContext))" result="viewScope.attributeConsentContext" />
            <evaluate expression="SetRPUIInformation.getRPUIContextCreateStrategy().apply(opensamlProfileRequestContext)" result="viewScope.rpUIContext" />
        </on-render>
        <transition on="proceed" to="TestForGlobalConsent" />
    </view-state>
    

    <!-- If global consent was given by user, create appropriate storage result and end flow. -->

    <decision-state id="TestForGlobalConsent">
        <if test="requestParameters._idp_consentOptions == '_idp_globalConsent'" then="GlobalConsent" else="ExtractConsent" />
    </decision-state>

    <action-state id="GlobalConsent">
        <evaluate expression="CreateGlobalAttributeConsentResult" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="proceed" />
    </action-state>


    <!-- Extract user input from form and update consent objects in consent context accordingly. -->

    <action-state id="ExtractConsent">
        <evaluate expression="ExtractConsent" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="TestForDoNotRememberConsent" />
    </action-state>


    <!-- Determine whether consent should be stored or not. -->
    
    <decision-state id="TestForDoNotRememberConsent">
        <if test="requestParameters._idp_consentOptions == '_idp_doNotRememberConsent'" then="RevokeConsent" else="CreateResult" />
    </decision-state>


    <!-- Revoke consent by deleting consent storage records. -->

    <action-state id="RevokeConsent">
        <evaluate expression="RevokeConsent" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="TestForRevokeGlobalAttributeConsent" />
    </action-state>

    <decision-state id="TestForRevokeGlobalAttributeConsent">
        <if test="flowScope.allowGlobalConsent" then="RevokeGlobalAttributeConsent" else="ReleaseAttributes" />
    </decision-state>

    <action-state id="RevokeGlobalAttributeConsent">
        <evaluate expression="RevokeGlobalAttributeConsent" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="ReleaseAttributes" />
    </action-state>


    <!-- Create result to be stored by interceptor flow. -->
    
    <action-state id="CreateResult">
        <evaluate expression="CreateResult" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="ReleaseAttributes" />
    </action-state>


    <!-- Release attributes consented to as well as non-consentable attributes from attribute context. -->
    
    <action-state id="ReleaseAttributes">
        <evaluate expression="ReleaseAttributes" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="proceed" />
    </action-state>

    <!-- TODO non-browser skip view -->

    <end-state id="proceed" />
    
    <bean-import resource="../../../system/flows/post-authn/attribute-release-abstract-beans.xml" />

</flow>
