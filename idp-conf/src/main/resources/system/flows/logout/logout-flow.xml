<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd">

    <action-state id="DoLogout">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="ProcessLogout" />
        <evaluate expression="LogoutPopulateAuditContext" />
        <evaluate expression="PopulateMultiRPContextFromLogoutContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="NextRelyingPartyContext" />
    </action-state>
    
    <decision-state id="NextRelyingPartyContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext), true).getRelyingPartyContextIterator().hasNext()"
            then="SetRPUIInformation" else="LogoutView" />
    </decision-state>
    
    <action-state id="SetRPUIInformation">
        <on-entry>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext)).getRelyingPartyContextIterator().next()" />
        </on-entry>
        <evaluate expression="SetRPUIInformation" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="NextRelyingPartyContext" />
    </action-state>
    
    <!-- Terminus -->

    <end-state id="LogoutView" view="logout">
        <on-entry>
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.LogoutContext))" result="requestScope.logoutContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext))" result="requestScope.multiRPContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
        </on-entry>
    </end-state>

    <!-- Passthrough state if an exception is thrown. -->

    <action-state id="LogRuntimeException">
        <evaluate expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.profile').error('Uncaught runtime exception', rootCauseException)" />
        <transition to="HandleErrorWithView" />
    </action-state>

    <!-- Unsuccessful terminal state. -->
    
    <end-state id="HandleErrorWithView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="ErrorViewPopulateAuditContext" />
            <evaluate expression="WriteAuditLogForLocalError" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
        </on-entry>
    </end-state>

    <!-- Default is to turn non-proceed events into an error. -->
    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="HandleErrorWithView" />
    </global-transitions>

    <!-- The import references the parent folder because the abstract flow is used only from one level down. -->
    <bean-import resource="logout-beans.xml" />

</flow>
