/*
 * Licensed to the University Corporation for Advanced Internet Development, 
 * Inc. (UCAID) under one or more contributor license agreements.  See the 
 * NOTICE file distributed with this work for additional information regarding
 * copyright ownership. The UCAID licenses this file to You under the Apache 
 * License, Version 2.0 (the "License"); you may not use this file except in 
 * compliance with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.shibboleth.idp.attribute.resolver.impl.dc;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Collections;
import java.util.Map;
import java.util.Set;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import net.shibboleth.idp.attribute.IdPAttribute;
import net.shibboleth.idp.attribute.IdPAttributeValue;
import net.shibboleth.idp.attribute.StringAttributeValue;
import net.shibboleth.idp.attribute.resolver.AbstractDataConnector;
import net.shibboleth.idp.attribute.resolver.ResolutionException;
import net.shibboleth.idp.attribute.resolver.ResolvedAttributeDefinition;
import net.shibboleth.idp.attribute.resolver.context.AttributeResolverWorkContext;
import net.shibboleth.utilities.java.support.annotation.constraint.NonnullAfterInit;
import net.shibboleth.utilities.java.support.codec.Base64Support;
import net.shibboleth.utilities.java.support.component.ComponentInitializationException;
import net.shibboleth.utilities.java.support.component.ComponentSupport;
import net.shibboleth.utilities.java.support.primitive.StringSupport;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The basis of a {@link net.shibboleth.idp.attribute.resolver.DataConnector} that generates a unique ID by
 * computing the SHA-1 hash of a given attribute value, the entity ID of the inbound message issuer, and a provided
 * salt. The ComputedIDDataConnector is a thin shim on this, the StoredIdConnector a slightly thicker shim.
 */
public abstract class BaseComputedIDDataConnector extends AbstractDataConnector {

    /** Class logger. */
    private final Logger log = LoggerFactory.getLogger(BaseComputedIDDataConnector.class);

    /** ID of the attribute generated by this data connector. */
    private String generatedAttribute;

    /** ID of the attribute whose first value is used when generating the computed ID. */
    private String sourceAttribute;

    /** Salt used when computing the ID. */
    private byte[] salt;

    /**
     * Gets the salt used when computing the ID.
     * 
     * @return salt used when computing the ID
     */
    @Nullable public byte[] getSalt() {
        return salt;
    }

    /**
     * Sets the salt used when computing the ID.
     * 
     * @param newValue used when computing the ID
     */
    public void setSalt(@Nullable byte[] newValue) {
        ComponentSupport.ifInitializedThrowUnmodifiabledComponentException(this);
        salt = newValue;
    }

    /**
     * Gets the ID of the attribute whose first value is used when generating the computed ID.
     * 
     * @return ID of the attribute whose first value is used when generating the computed ID
     */
    @Nullable @NonnullAfterInit public String getSourceAttributeId() {
        return sourceAttribute;
    }

    /**
     * Sets the ID of the attribute whose first value is used when generating the computed ID.
     * 
     * @param newAttributeId what to set.
     */
    public void setSourceAttributeId(@Nullable String newAttributeId) {
        ComponentSupport.ifInitializedThrowUnmodifiabledComponentException(this);
        sourceAttribute = StringSupport.trimOrNull(newAttributeId);
    }

    /**
     * Gets the ID of the attribute generated by this connector.
     * 
     * @return ID of the attribute generated by this connector
     */
    @Nullable @NonnullAfterInit public String getGeneratedAttributeId() {
        return generatedAttribute;
    }

    /**
     * Sets the ID of the attribute generated by this connector.
     * 
     * @param newAttributeId what to set.
     */
    public void setGeneratedAttributeId(@Nullable String newAttributeId) {
        ComponentSupport.ifInitializedThrowUnmodifiabledComponentException(this);
        generatedAttribute = newAttributeId;
    }

    /** {@inheritDoc} */
    protected void doInitialize() throws ComponentInitializationException {
        super.doInitialize();

        if (null == getSourceAttributeId()) {
            throw new ComponentInitializationException(getLogPrefix() + " No source attribute present.");
        }

        //
        // We don't test the salt because in the StoredIdcase we may never need it. The concrete
        // classes can test if they want.
        //

        if (null == generatedAttribute) {
            generatedAttribute = getId();
        }
    }

    /**
     * Helper function to locate the source Attribute in the dependencies.
     * 
     * @param workContext the context to look in
     * @return the value, or null in any of the failure cases.
     */
    @Nullable protected String resolveSourceAttribute(@Nonnull AttributeResolverWorkContext workContext) {
        ComponentSupport.ifNotInitializedThrowUninitializedComponentException(this);
        ResolvedAttributeDefinition attributeDefinition =
                workContext.getResolvedIdPAttributeDefinitions().get(getSourceAttributeId());
        ComponentSupport.ifNotInitializedThrowUninitializedComponentException(this);
        ComponentSupport.ifDestroyedThrowDestroyedComponentException(this);

        if (null == attributeDefinition || null == attributeDefinition.getResolvedAttribute()) {
            log.warn("{} Source attribute {} for connector {} was not present in dependencies", getLogPrefix(),
                    getSourceAttributeId(), getId());
            return null;
        }

        final Set<IdPAttributeValue<?>> attributeValues = attributeDefinition.getResolvedAttribute().getValues();
        if (attributeValues == null || attributeValues.isEmpty()) {
            log.debug("{} Source attribute {} for connector {} provide no values", getLogPrefix(),
                    getSourceAttributeId(), getId());
            return null;
        }

        if (attributeValues.size() > 1) {
            log.warn("{} Source attribute {} for connector {} has more than one value, only the first value is used",
                    getLogPrefix(), getSourceAttributeId(), getId());
        }

        final IdPAttributeValue attributeValue = attributeValues.iterator().next();

        final String val;

        if (attributeValue instanceof StringAttributeValue) {
            val = StringSupport.trimOrNull(((StringAttributeValue) attributeValue).getValue());
        } else {
            log.warn("{} Source attribute {} for connector {} was not a string type.  Not used",
                    getSourceAttributeId(), getLogPrefix(), getId());
            return null;
        }

        if (val == null) {
            log.warn("{} Attribute {} for connector resolved as empty or null.  Not used", getLogPrefix(),
                    getSourceAttributeId(), getId());
        }
        return val;
    }

    /**
     * Compute the hash from the provided inputs.
     * 
     * @param spEntityId The entitity of the SP/relying party.
     * @param sourceValue the source attribute value to use
     * @return the hash, or null if the attribute could not be resolved.
     * @throws ResolutionException if we could not get the SP Id.
     */
    @Nullable protected String generateComputedId(@Nonnull String spEntityId, @Nullable String sourceValue)
            throws ResolutionException {

        ComponentSupport.ifNotInitializedThrowUninitializedComponentException(this);

        if (null == sourceValue) {
            // The message will have been logged above
            return null;
        }
        try {
            MessageDigest md = MessageDigest.getInstance("SHA");
            md.update(spEntityId.getBytes());
            md.update((byte) '!');
            md.update(sourceValue.getBytes());
            md.update((byte) '!');

            return Base64Support.encode(md.digest(salt), Base64Support.UNCHUNKED);
        } catch (NoSuchAlgorithmException e) {
            log.error("JVM error, SHA-1 hash is not supported.");
            throw new ResolutionException("SHA-1A is not supported, unable to compute ID");
        }
    }

    /**
     * Encode the provided string.
     * 
     * @param value the value to encode or null if that failed
     * @return null or the attribute.
     */
    @Nullable protected Map<String, IdPAttribute> encodeAsAttribute(@Nullable String value) {
        ComponentSupport.ifNotInitializedThrowUninitializedComponentException(this);
        if (null == value) {
            // The message will have been logged above
            return null;
        }
        IdPAttribute attribute = new IdPAttribute(getGeneratedAttributeId());
        attribute.setValues(Collections.singleton(new StringAttributeValue(value)));
        return Collections.singletonMap(getGeneratedAttributeId(), attribute);
    }
    
}