/*
 * Licensed to the University Corporation for Advanced Internet Development, 
 * Inc. (UCAID) under one or more contributor license agreements.  See the 
 * NOTICE file distributed with this work for additional information regarding
 * copyright ownership. The UCAID licenses this file to You under the Apache 
 * License, Version 2.0 (the "License"); you may not use this file except in 
 * compliance with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.shibboleth.idp.attribute.resolver.impl.dc;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import net.shibboleth.idp.attribute.Attribute;
import net.shibboleth.idp.attribute.AttributeValue;
import net.shibboleth.idp.attribute.resolver.AttributeResolutionContext;
import net.shibboleth.idp.attribute.resolver.AttributeResolutionException;
import net.shibboleth.idp.attribute.resolver.BaseDataConnector;
import net.shibboleth.utilities.java.support.component.ComponentInitializationException;
import net.shibboleth.utilities.java.support.component.ComponentSupport;

import org.opensaml.core.xml.XMLObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Function;
import com.google.common.base.Optional;

/**
 * Data Connector to extra attributes from a saml2 {@link org.opensaml.saml.saml2.core.Assertion}.
 */
public abstract class BaseSamlAttributeDataConnector extends BaseDataConnector {

    /** Class logger. */
    private final Logger log = LoggerFactory.getLogger(BaseSamlAttributeDataConnector.class);

    /** ID of the attribute generated by this data connector. */
    private String generatedAttribute;

    /** ID of the attribute whose first value is used when generating the computed ID. */
    private String sourceAttribute;

    /**
     * The way to get the list of attributes from the resolution context.
     */
    private Function<AttributeResolutionContext, List<org.opensaml.saml.saml2.core.Attribute>> attributesStrategy;

    /**
     * Gets the ID of the attribute whose first value is used when generating the computed ID.
     * 
     * @return ID of the attribute whose first value is used when generating the computed ID
     */
    public String getSourceAttributeId() {
        return sourceAttribute;
    }

    /**
     * Sets the ID of the attribute whose first value is used when generating the computed ID.
     * 
     * @param newAttributeId what to set.
     */
    public void setSourceAttributeId(String newAttributeId) {
        ComponentSupport.ifInitializedThrowUnmodifiabledComponentException(this);
        sourceAttribute = newAttributeId;
    }

    /**
     * Gets the ID of the attribute generated by this connector.
     * 
     * @return ID of the attribute generated by this connector
     */
    public String getGeneratedAttributeId() {
        return generatedAttribute;
    }

    /**
     * Sets the ID of the attribute generated by this connector.
     * 
     * @param newAttributeId what to set.
     */
    public void setGeneratedAttributeId(String newAttributeId) {
        ComponentSupport.ifInitializedThrowUnmodifiabledComponentException(this);
        generatedAttribute = newAttributeId;
    }

    /**
     * Gets the strategy for finding the Attributes from the resolution context.
     * 
     * @return the required strategy.
     */
    public Function<AttributeResolutionContext, List<org.opensaml.saml.saml2.core.Attribute>> getAttributesStrategy() {
        return attributesStrategy;
    }

    /**
     * Sets the strategy for finding the Attributes from the resolution context.
     * 
     * @param strategy to set.
     */
    public void setAttributesStrategy(
            Function<AttributeResolutionContext, List<org.opensaml.saml.saml2.core.Attribute>> strategy) {
        ComponentSupport.ifInitializedThrowUnmodifiabledComponentException(this);
        attributesStrategy = strategy;
    }

    /** {@inheritDoc} */
    protected void doInitialize() throws ComponentInitializationException {
        super.doInitialize();

        if (null == attributesStrategy) {
            throw new ComponentInitializationException("Attribute Connector '" + getId()
                    + "': no Attribute location strategy set");
        }

        if (null == getSourceAttributeId()) {
            throw new ComponentInitializationException("Attribute Connector'" + getId()
                    + "': No source attribute present.");
        }

        if (null == generatedAttribute) {
            generatedAttribute = getId();
        }
    }

    /**
     * Encode a list of SAML objects as set of {@link AttributeValue}.
     * 
     * @param attributeValues the input values
     * @return a list of values, not empty. Null if no encoding worked.
     */
    @Nullable protected Collection<AttributeValue> encodeValues(final List<XMLObject> attributeValues) {
        final HashSet<AttributeValue> result = new HashSet<AttributeValue>(attributeValues.size());

        for (XMLObject object : attributeValues) {
            AttributeValue val = encodeValue(object);

            if (null != val) {
                result.add(val);
            }
        }
        if (0 == result.size()) {
            return null;
        }
        return result;
    }

    /** {@inheritDoc} */
    @Nonnull protected Optional<Map<String, Attribute>> doDataConnectorResolve(
            @Nonnull final AttributeResolutionContext resolutionContext) throws AttributeResolutionException {
        final List<org.opensaml.saml.saml2.core.Attribute> samlAttributes = attributesStrategy.apply(resolutionContext);
        
        if (null == samlAttributes) {
            log.debug("Connector '{}' no attributes found", getId());
        }

        for (org.opensaml.saml.saml2.core.Attribute samlAttribute : samlAttributes) {
            if (sourceAttribute.equals(samlAttribute.getName())) {
                log.debug("Connector '{}': found attribute named '{}'", getId(), sourceAttribute);

                final Collection<AttributeValue> values = encodeValues(samlAttribute.getAttributeValues());

                if (null == values) {
                    return Optional.absent();
                }

                Attribute attribute = new Attribute(getGeneratedAttributeId());
                attribute.setValues(values);

                return Optional.of(Collections.singletonMap(generatedAttribute, attribute));
            }
            log.debug("Connector '{}': skipping attribute named '{}'", getId(), samlAttribute.getName());
        }
        log.debug("Connector '{}': no attributes matched '{}'", getId(), sourceAttribute);
        return Optional.absent();
    }

    /**
     * Method to convert a singled {@link XMLObject} into an {@link AttributeValue} if possible.
     * 
     * @param object the object to encode
     * @return an {@link AttributeValue}, or null if no encoding exists.
     */
    protected abstract AttributeValue encodeValue(XMLObject object);

}
