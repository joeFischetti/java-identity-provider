This document provides the steps necessary for a developer to add a new project
module.

The following steps should be performed from the command line, outside Eclipse.
All instances of "MODULE_NAME" should be replaced with whatever you call your
module.

The MODULE_NAME should end in either -api or -impl.  -api modules contain the 
interfaces and classes that form the public API for plugins.  If you put classes
in there you are committing to API compatibility throughout the lifetime of the 3.x
code.  -impl modules contain internal implementations of stuff found in the -api
modules.  Code within -impl modules can be torn up and changed at any point without
having to worry about breaking compatibility.  So, to put it another away, don't 
put stuff in -api unless you're really sure it needs to be there.

1. Create a directory called idp-MODULE_NAME as a child of the 
   java-identity-provider project

2. With in the module directory create the directories:
   - src/main/java
   - src/main/resources
   - src/test/java
   - src/test/resources

3. Copy the java-identity-provider/idp-parent/module-settings/pom-template.xml in 
   to your module directory and edit the following lines:
   - line 14, replace "DESCRIPTIVE NAME" with a decently descriptive name
   - line 15, replace "MODULE_NAME"

4. From the java-identity-provider directory, add your module to SVN with the command:
   svn add idp-MODULE_NAME
   
5. From the java-identity-provider directory, run the following SVN command:
   svn propset svn:externals -F idp-parent/module-settings/externals.svn idp-MODULE_NAME
   
6. Commit your module to SVN with the following command:
   svn commit idp-MODULE_NAME -m "LOG MESSAGE" 

7. Perform an svn update to pull in the externalized files (set up via step 5)

8. Add module to the idp-parent/pom.xml and commit change to this POM.

Now, from Eclipse

1. Within the package explore, right-click and select "Import"

2. Select "Maven 2 Project" as the project type

3. For the project location select your module via Browse

4. Import the module

At this point you should be good to go.  If the module doesn't show up in your
Package Explorer view, and you're using workbench working sets, be sure to 
add the new module to your working set.

Some notes:
* The .checkstyle file or .settings directory are maintained centrally for all
modules.  So don't commit changes to them unless you really mean to change the
setting for all modules.

* The idp-parent/pom.xml declares both inherited and managed dependencies.
Inherited dependencies are inherited by, available to, all project modules. You
don't have to do anything in your pom to get them. Managed dependencies are 
managed (version, scope, exclusions, etc.) by the parent pom but are not 
automatically available to your project.  To use them your must declare a 
dependency with the a groupId, artifactId, and optionally a qualifier.  You do
not declare the version, scope, or exclusions (thats the managed part).

* If you have a dependency that is used by another module, define it as a 
managed dependency in the parent pom and change the other module's pom to use 
the dependency as a managed dependency.  In general, you should not declare 
additional inherited dependencies unless you're certain that every single 
project module will need it.